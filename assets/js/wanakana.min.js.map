{"version":3,"file":"wanakana.min.js","sources":["../src/utils/typeOf.js","../src/utils/isEmpty.js","../src/utils/isCharInRange.js","../src/constants.js","../src/utils/isCharJapanese.js","../src/isJapanese.js","../node_modules/memoize-one/dist/memoize-one.esm.js","../node_modules/dequal/dist/index.mjs","../src/utils/mergeWithDefaultOptions.js","../src/utils/kanaMapping.js","../src/utils/romajiToKanaMap.js","../src/utils/isCharUpperCase.js","../src/utils/isCharLongDash.js","../src/utils/isCharSlashDot.js","../src/utils/isCharHiragana.js","../src/utils/hiraganaToKatakana.js","../src/toKana.js","../src/utils/dom.js","../src/utils/logInputEvents.js","../src/bind.js","../src/utils/isCharRomaji.js","../src/isRomaji.js","../src/utils/isCharKatakana.js","../src/utils/isCharKana.js","../src/isKana.js","../src/isHiragana.js","../src/isKatakana.js","../src/utils/isCharIterationMark.js","../src/utils/isCharKanji.js","../src/isKanji.js","../src/isMixed.js","../src/utils/katakanaToHiragana.js","../src/utils/kanaToRomajiMap.js","../src/toRomaji.js","../src/utils/isCharEnglishPunctuation.js","../src/utils/isCharJapanesePunctuation.js","../src/tokenize.js","../src/stripOkurigana.js","../src/toHiragana.js","../src/toKatakana.js","../src/unbind.js"],"sourcesContent":["/**\n * Returns detailed type as string (instead of just 'object' for arrays etc)\n * @private\n * @param {any} value js value\n * @returns {String} type of value\n * @example\n * typeOf({}); // 'object'\n * typeOf([]); // 'array'\n * typeOf(function() {}); // 'function'\n * typeOf(/a/); // 'regexp'\n * typeOf(new Date()); // 'date'\n * typeOf(null); // 'null'\n * typeOf(undefined); // 'undefined'\n * typeOf('a'); // 'string'\n * typeOf(1); // 'number'\n * typeOf(true); // 'boolean'\n * typeOf(new Map()); // 'map'\n * typeOf(new Set()); // 'map'\n */\nfunction typeOf(value) {\n  if (value === null) {\n    return 'null';\n  }\n  if (value !== Object(value)) {\n    return typeof value;\n  }\n  return {}.toString\n    .call(value)\n    .slice(8, -1)\n    .toLowerCase();\n}\n\nexport default typeOf;\n","import typeOf from './typeOf';\n/**\n * Checks if input string is empty\n * @param  {String} input text input\n * @return {Boolean} true if no input\n */\nfunction isEmpty(input) {\n  if (typeOf(input) !== 'string') {\n    return true;\n  }\n  return !input.length;\n}\n\nexport default isEmpty;\n","import isEmpty from './isEmpty';\n\n/**\n * Takes a character and a unicode range. Returns true if the char is in the range.\n * @param  {String}  char  unicode character\n * @param  {Number}  start unicode start range\n * @param  {Number}  end   unicode end range\n * @return {Boolean}\n */\nfunction isCharInRange(char = '', start, end) {\n  if (isEmpty(char)) return false;\n  const code = char.charCodeAt(0);\n  return start <= code && code <= end;\n}\n\nexport default isCharInRange;\n","export const VERSION = '5.2.0';\n\nexport const TO_KANA_METHODS = {\n  HIRAGANA: 'toHiragana',\n  KATAKANA: 'toKatakana',\n};\n\nexport const ROMANIZATIONS = {\n  HEPBURN: 'hepburn',\n};\n\n/**\n * Default config for WanaKana, user passed options will be merged with these\n * @type {DefaultOptions}\n * @name defaultOptions\n * @property {Boolean} [useObsoleteKana=false] - Set to true to use obsolete characters, such as ゐ and ゑ.\n * @example\n * toHiragana('we', { useObsoleteKana: true })\n * // => 'ゑ'\n * @property {Boolean} [passRomaji=false] - Set to true to pass romaji when using mixed syllabaries with toKatakana() or toHiragana()\n * @example\n * toHiragana('only convert the katakana: ヒラガナ', { passRomaji: true })\n * // => \"only convert the katakana: ひらがな\"\n * @property {Object} [convertLongVowelMark=true] - Set to false to prevent conversions of 'ー' to extended vowels with toHiragana()\n * @example\n * toHiragana('ラーメン', { convertLongVowelMark: false });\n * // => 'らーめん\n * @property {Boolean} [upcaseKatakana=false] - Set to true to convert katakana to uppercase using toRomaji()\n * @example\n * toRomaji('ひらがな カタカナ', { upcaseKatakana: true })\n * // => \"hiragana KATAKANA\"\n * @property {Boolean|String} [IMEMode=false] - Set to true, 'toHiragana', or 'toKatakana' to handle conversion while it is being typed.\n * @property {String} [romanization='hepburn'] - choose toRomaji() romanization map (currently only 'hepburn')\n * @property {Object} [customKanaMapping] - custom map will be merged with default conversion\n * @example\n * toKana('wanakana', { customKanaMapping: { na: 'に', ka: 'Bana' }) };\n * // => 'わにBanaに'\n * @property {Object} [customRomajiMapping] - custom map will be merged with default conversion\n * @example\n * toRomaji('つじぎり', { customRomajiMapping: { じ: 'zi', つ: 'tu', り: 'li' }) };\n * // => 'tuzigili'\n */\nexport const DEFAULT_OPTIONS = {\n  useObsoleteKana: false,\n  passRomaji: false,\n  upcaseKatakana: false,\n  IMEMode: false,\n  convertLongVowelMark: true,\n  romanization: ROMANIZATIONS.HEPBURN,\n};\n\n// CharCode References\n// http://www.rikai.com/library/kanjitables/kanji_codes.unicode.shtml\n// http://unicode-table.com\n\nexport const LATIN_LOWERCASE_START = 0x61;\nexport const LATIN_LOWERCASE_END = 0x7a;\nexport const LATIN_UPPERCASE_START = 0x41;\nexport const LATIN_UPPERCASE_END = 0x5a;\nexport const LOWERCASE_ZENKAKU_START = 0xff41;\nexport const LOWERCASE_ZENKAKU_END = 0xff5a;\nexport const UPPERCASE_ZENKAKU_START = 0xff21;\nexport const UPPERCASE_ZENKAKU_END = 0xff3a;\nexport const HIRAGANA_START = 0x3041;\nexport const HIRAGANA_END = 0x3096;\nexport const KATAKANA_START = 0x30a1;\nexport const KATAKANA_END = 0x30fc;\nexport const KANJI_START = 0x4e00;\nexport const KANJI_END = 0x9faf;\n\nexport const KANJI_ITERATION_MARK = 0x3005; // 々\nexport const PROLONGED_SOUND_MARK = 0x30fc; // ー\nexport const KANA_SLASH_DOT = 0x30fb; // ・\n\nconst ZENKAKU_NUMBERS = [0xff10, 0xff19];\nconst ZENKAKU_UPPERCASE = [UPPERCASE_ZENKAKU_START, UPPERCASE_ZENKAKU_END];\nconst ZENKAKU_LOWERCASE = [LOWERCASE_ZENKAKU_START, LOWERCASE_ZENKAKU_END];\nconst ZENKAKU_PUNCTUATION_1 = [0xff01, 0xff0f];\nconst ZENKAKU_PUNCTUATION_2 = [0xff1a, 0xff1f];\nconst ZENKAKU_PUNCTUATION_3 = [0xff3b, 0xff3f];\nconst ZENKAKU_PUNCTUATION_4 = [0xff5b, 0xff60];\nconst ZENKAKU_SYMBOLS_CURRENCY = [0xffe0, 0xffee];\n\nconst HIRAGANA_CHARS = [0x3040, 0x309f];\nconst KATAKANA_CHARS = [0x30a0, 0x30ff];\nconst HANKAKU_KATAKANA = [0xff66, 0xff9f];\nconst KATAKANA_PUNCTUATION = [0x30fb, 0x30fc];\nconst KANA_PUNCTUATION = [0xff61, 0xff65];\nconst CJK_SYMBOLS_PUNCTUATION = [0x3000, 0x303f];\nconst COMMON_CJK = [0x4e00, 0x9fff];\nconst RARE_CJK = [0x3400, 0x4dbf];\n\nexport const KANA_RANGES = [\n  HIRAGANA_CHARS,\n  KATAKANA_CHARS,\n  KANA_PUNCTUATION,\n  HANKAKU_KATAKANA,\n];\n\nexport const JA_PUNCTUATION_RANGES = [\n  CJK_SYMBOLS_PUNCTUATION,\n  KANA_PUNCTUATION,\n  KATAKANA_PUNCTUATION,\n  ZENKAKU_PUNCTUATION_1,\n  ZENKAKU_PUNCTUATION_2,\n  ZENKAKU_PUNCTUATION_3,\n  ZENKAKU_PUNCTUATION_4,\n  ZENKAKU_SYMBOLS_CURRENCY,\n];\n\n// All Japanese unicode start and end ranges\n// Includes kanji, kana, zenkaku latin chars, punctuation, and number ranges.\nexport const JAPANESE_RANGES = [\n  ...KANA_RANGES,\n  ...JA_PUNCTUATION_RANGES,\n  ZENKAKU_UPPERCASE,\n  ZENKAKU_LOWERCASE,\n  ZENKAKU_NUMBERS,\n  COMMON_CJK,\n  RARE_CJK,\n];\n\nconst MODERN_ENGLISH = [0x0000, 0x007f];\nconst HEPBURN_MACRON_RANGES = [\n  [0x0100, 0x0101], // Ā ā\n  [0x0112, 0x0113], // Ē ē\n  [0x012a, 0x012b], // Ī ī\n  [0x014c, 0x014d], // Ō ō\n  [0x016a, 0x016b], // Ū ū\n];\nconst SMART_QUOTE_RANGES = [\n  [0x2018, 0x2019], // ‘ ’\n  [0x201c, 0x201d], // “ ”\n];\n\nexport const ROMAJI_RANGES = [MODERN_ENGLISH, ...HEPBURN_MACRON_RANGES];\n\nexport const EN_PUNCTUATION_RANGES = [\n  [0x20, 0x2f],\n  [0x3a, 0x3f],\n  [0x5b, 0x60],\n  [0x7b, 0x7e],\n  ...SMART_QUOTE_RANGES,\n];\n","import isCharInRange from './isCharInRange';\nimport { JAPANESE_RANGES } from '../constants';\n\n/**\n * Tests a character. Returns true if the character is [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharJapanese(char = '') {\n  return JAPANESE_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\nexport default isCharJapanese;\n","import typeOf from './utils/typeOf';\nimport isEmpty from './utils/isEmpty';\nimport isCharJapanese from './utils/isCharJapanese';\n\n/**\n * Test if `input` only includes [Kanji](https://en.wikipedia.org/wiki/Kanji), [Kana](https://en.wikipedia.org/wiki/Kana), zenkaku numbers, and JA punctuation/symbols.”\n * @param  {String} [input=''] text\n * @param  {Regexp} [allowed] additional test allowed to pass for each char\n * @return {Boolean} true if passes checks\n * @example\n * isJapanese('泣き虫')\n * // => true\n * isJapanese('あア')\n * // => true\n * isJapanese('２月') // Zenkaku numbers allowed\n * // => true\n * isJapanese('泣き虫。！〜＄') // Zenkaku/JA punctuation\n * // => true\n * isJapanese('泣き虫.!~$') // Latin punctuation fails\n * // => false\n * isJapanese('A泣き虫')\n * // => false\n * isJapanese('≪偽括弧≫', /[≪≫]/);\n * // => true\n */\nfunction isJapanese(input = '', allowed) {\n  const augmented = typeOf(allowed) === 'regexp';\n  return isEmpty(input)\n    ? false\n    : [...input].every((char) => {\n      const isJa = isCharJapanese(char);\n      return !augmented ? isJa : isJa || allowed.test(char);\n    });\n}\n\nexport default isJapanese;\n","var safeIsNaN = Number.isNaN ||\n    function ponyfill(value) {\n        return typeof value === 'number' && value !== value;\n    };\nfunction isEqual(first, second) {\n    if (first === second) {\n        return true;\n    }\n    if (safeIsNaN(first) && safeIsNaN(second)) {\n        return true;\n    }\n    return false;\n}\nfunction areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n        return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n        if (!isEqual(newInputs[i], lastInputs[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) { isEqual = areInputsEqual; }\n    var cache = null;\n    function memoized() {\n        var newArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            newArgs[_i] = arguments[_i];\n        }\n        if (cache && cache.lastThis === this && isEqual(newArgs, cache.lastArgs)) {\n            return cache.lastResult;\n        }\n        var lastResult = resultFn.apply(this, newArgs);\n        cache = {\n            lastResult: lastResult,\n            lastArgs: newArgs,\n            lastThis: this,\n        };\n        return lastResult;\n    }\n    memoized.clear = function clear() {\n        cache = null;\n    };\n    return memoized;\n}\n\nexport { memoizeOne as default };\n","var has = Object.prototype.hasOwnProperty;\n\nfunction find(iter, tar, key) {\n\tfor (key of iter.keys()) {\n\t\tif (dequal(key, tar)) return key;\n\t}\n}\n\nexport function dequal(foo, bar) {\n\tvar ctor, len, tmp;\n\tif (foo === bar) return true;\n\n\tif (foo && bar && (ctor=foo.constructor) === bar.constructor) {\n\t\tif (ctor === Date) return foo.getTime() === bar.getTime();\n\t\tif (ctor === RegExp) return foo.toString() === bar.toString();\n\n\t\tif (ctor === Array) {\n\t\t\tif ((len=foo.length) === bar.length) {\n\t\t\t\twhile (len-- && dequal(foo[len], bar[len]));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ctor === Set) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len;\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!bar.has(tmp)) return false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === Map) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len[0];\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!dequal(len[1], bar.get(tmp))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === ArrayBuffer) {\n\t\t\tfoo = new Uint8Array(foo);\n\t\t\tbar = new Uint8Array(bar);\n\t\t} else if (ctor === DataView) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo.getInt8(len) === bar.getInt8(len));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ArrayBuffer.isView(foo)) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo[len] === bar[len]);\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (!ctor || typeof foo === 'object') {\n\t\t\tlen = 0;\n\t\t\tfor (ctor in foo) {\n\t\t\t\tif (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n\t\t\t\tif (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;\n\t\t\t}\n\t\t\treturn Object.keys(bar).length === len;\n\t\t}\n\t}\n\n\treturn foo !== foo && bar !== bar;\n}\n","import { DEFAULT_OPTIONS } from '../constants';\n/**\n * Easy re-use of merging with default options\n * @param {Object} opts user options\n * @returns user options merged over default options\n */\nconst mergeWithDefaultOptions = (opts = {}) => Object.assign({}, DEFAULT_OPTIONS, opts);\n\nexport default mergeWithDefaultOptions;\n","import typeOf from './typeOf';\n\nexport function applyMapping(string, mapping, convertEnding) {\n  const root = mapping;\n\n  function nextSubtree(tree, nextChar) {\n    const subtree = tree[nextChar];\n    if (subtree === undefined) {\n      return undefined;\n    }\n    // if the next child node does not have a node value, set its node value to the input\n    return Object.assign({ '': tree[''] + nextChar }, tree[nextChar]);\n  }\n\n  function newChunk(remaining, currentCursor) {\n    // start parsing a new chunk\n    const firstChar = remaining.charAt(0);\n\n    return parse(\n      Object.assign({ '': firstChar }, root[firstChar]),\n      remaining.slice(1),\n      currentCursor,\n      currentCursor + 1\n    );\n  }\n\n  function parse(tree, remaining, lastCursor, currentCursor) {\n    if (!remaining) {\n      if (convertEnding || Object.keys(tree).length === 1) {\n        // nothing more to consume, just commit the last chunk and return it\n        // so as to not have an empty element at the end of the result\n        return tree[''] ? [[lastCursor, currentCursor, tree['']]] : [];\n      }\n      // if we don't want to convert the ending, because there are still possible continuations\n      // return null as the final node value\n      return [[lastCursor, currentCursor, null]];\n    }\n\n    if (Object.keys(tree).length === 1) {\n      return [[lastCursor, currentCursor, tree['']]].concat(\n        newChunk(remaining, currentCursor)\n      );\n    }\n\n    const subtree = nextSubtree(tree, remaining.charAt(0));\n\n    if (subtree === undefined) {\n      return [[lastCursor, currentCursor, tree['']]].concat(\n        newChunk(remaining, currentCursor)\n      );\n    }\n    // continue current branch\n    return parse(subtree, remaining.slice(1), lastCursor, currentCursor + 1);\n  }\n\n  return newChunk(string, 0);\n}\n\n// transform the tree, so that for example hepburnTree['ゔ']['ぁ'][''] === 'va'\n// or kanaTree['k']['y']['a'][''] === 'きゃ'\nexport function transform(tree) {\n  return Object.entries(tree).reduce((map, [char, subtree]) => {\n    const endOfBranch = typeOf(subtree) === 'string';\n    // eslint-disable-next-line no-param-reassign\n    map[char] = endOfBranch ? { '': subtree } : transform(subtree);\n    return map;\n  }, {});\n}\n\nexport function getSubTreeOf(tree, string) {\n  return string.split('').reduce((correctSubTree, char) => {\n    if (correctSubTree[char] === undefined) {\n      // eslint-disable-next-line no-param-reassign\n      correctSubTree[char] = {};\n    }\n    return correctSubTree[char];\n  }, tree);\n}\n\n/**\n * Creates a custom mapping tree, returns a function that accepts a defaultMap which the newly created customMapping will be merged with and returned\n * (customMap) => (defaultMap) => mergedMap\n * @param  {Object} customMap { 'ka' : 'な' }\n * @return {Function} (defaultMap) => defaultMergedWithCustomMap\n * @example\n * const sillyMap = createCustomMapping({ 'ちゃ': 'time', '茎': 'cookie'　});\n * // sillyMap is passed defaultMapping to merge with when called in toRomaji()\n * toRomaji(\"It's 茎 ちゃ よ\", { customRomajiMapping: sillyMap });\n * // => 'It's cookie time yo';\n */\nexport function createCustomMapping(customMap = {}) {\n  const customTree = {};\n\n  if (typeOf(customMap) === 'object') {\n    Object.entries(customMap).forEach(([roma, kana]) => {\n      let subTree = customTree;\n      roma.split('').forEach((char) => {\n        if (subTree[char] === undefined) {\n          subTree[char] = {};\n        }\n        subTree = subTree[char];\n      });\n      subTree[''] = kana;\n    });\n  }\n\n  return function makeMap(map) {\n    const mapCopy = JSON.parse(JSON.stringify(map));\n\n    function transformMap(mapSubtree, customSubtree) {\n      if (mapSubtree === undefined || typeOf(mapSubtree) === 'string') {\n        return customSubtree;\n      }\n      return Object.entries(customSubtree).reduce(\n        (newSubtree, [char, subtree]) => {\n          // eslint-disable-next-line no-param-reassign\n          newSubtree[char] = transformMap(mapSubtree[char], subtree);\n          return newSubtree;\n        },\n        mapSubtree\n      );\n    }\n\n    return transformMap(mapCopy, customTree);\n  };\n}\n\n// allow consumer to pass either function or object as customMapping\nexport function mergeCustomMapping(map, customMapping) {\n  if (!customMapping) {\n    return map;\n  }\n  return typeOf(customMapping) === 'function'\n    ? customMapping(map)\n    : createCustomMapping(customMapping)(map);\n}\n","import { transform, getSubTreeOf, createCustomMapping } from './kanaMapping';\n\n// NOTE: not exactly kunrei shiki, for example ぢゃ -> dya instead of zya, to avoid name clashing\n/* eslint-disable */\n// prettier-ignore\nconst BASIC_KUNREI = {\n  a: 'あ', i: 'い', u: 'う', e: 'え', o: 'お',\n  k: { a: 'か', i: 'き', u: 'く', e: 'け', o: 'こ', },\n  s: { a: 'さ', i: 'し', u: 'す', e: 'せ', o: 'そ', },\n  t: { a: 'た', i: 'ち', u: 'つ', e: 'て', o: 'と', },\n  n: { a: 'な', i: 'に', u: 'ぬ', e: 'ね', o: 'の', },\n  h: { a: 'は', i: 'ひ', u: 'ふ', e: 'へ', o: 'ほ', },\n  m: { a: 'ま', i: 'み', u: 'む', e: 'め', o: 'も', },\n  y: { a: 'や', u: 'ゆ', o: 'よ' },\n  r: { a: 'ら', i: 'り', u: 'る', e: 'れ', o: 'ろ', },\n  w: { a: 'わ', i: 'ゐ', e: 'ゑ', o: 'を', },\n  g: { a: 'が', i: 'ぎ', u: 'ぐ', e: 'げ', o: 'ご', },\n  z: { a: 'ざ', i: 'じ', u: 'ず', e: 'ぜ', o: 'ぞ', },\n  d: { a: 'だ', i: 'ぢ', u: 'づ', e: 'で', o: 'ど', },\n  b: { a: 'ば', i: 'び', u: 'ぶ', e: 'べ', o: 'ぼ', },\n  p: { a: 'ぱ', i: 'ぴ', u: 'ぷ', e: 'ぺ', o: 'ぽ', },\n  v: { a: 'ゔぁ', i: 'ゔぃ', u: 'ゔ', e: 'ゔぇ', o: 'ゔぉ', },\n};\n\nconst SPECIAL_SYMBOLS = {\n  '.': '。',\n  ',': '、',\n  ':': '：',\n  '/': '・',\n  '!': '！',\n  '?': '？',\n  '~': '〜',\n  '-': 'ー',\n  '‘': '「',\n  '’': '」',\n  '“': '『',\n  '”': '』',\n  '[': '［',\n  ']': '］',\n  '(': '（',\n  ')': '）',\n  '{': '｛',\n  '}': '｝',\n};\n\nconst CONSONANTS = {\n  k: 'き',\n  s: 'し',\n  t: 'ち',\n  n: 'に',\n  h: 'ひ',\n  m: 'み',\n  r: 'り',\n  g: 'ぎ',\n  z: 'じ',\n  d: 'ぢ',\n  b: 'び',\n  p: 'ぴ',\n  v: 'ゔ',\n  q: 'く',\n  f: 'ふ',\n};\nconst SMALL_Y = { ya: 'ゃ', yi: 'ぃ', yu: 'ゅ', ye: 'ぇ', yo: 'ょ' };\nconst SMALL_VOWELS = { a: 'ぁ', i: 'ぃ', u: 'ぅ', e: 'ぇ', o: 'ぉ' };\n\n// typing one should be the same as having typed the other instead\nconst ALIASES = {\n  sh: 'sy', // sha -> sya\n  ch: 'ty', // cho -> tyo\n  cy: 'ty', // cyo -> tyo\n  chy: 'ty', // chyu -> tyu\n  shy: 'sy', // shya -> sya\n  j: 'zy', // ja -> zya\n  jy: 'zy', // jye -> zye\n\n  // exceptions to above rules\n  shi: 'si',\n  chi: 'ti',\n  tsu: 'tu',\n  ji: 'zi',\n  fu: 'hu',\n};\n\n// xtu -> っ\nconst SMALL_LETTERS = Object.assign(\n  {\n    tu: 'っ',\n    wa: 'ゎ',\n    ka: 'ヵ',\n    ke: 'ヶ',\n  },\n  SMALL_VOWELS,\n  SMALL_Y\n);\n\n// don't follow any notable patterns\nconst SPECIAL_CASES = {\n  yi: 'い',\n  wu: 'う',\n  ye: 'いぇ',\n  wi: 'うぃ',\n  we: 'うぇ',\n  kwa: 'くぁ',\n  whu: 'う',\n  // because it's not thya for てゃ but tha\n  // and tha is not てぁ, but てゃ\n  tha: 'てゃ',\n  thu: 'てゅ',\n  tho: 'てょ',\n  dha: 'でゃ',\n  dhu: 'でゅ',\n  dho: 'でょ',\n};\n\nconst AIUEO_CONSTRUCTIONS = {\n  wh: 'う',\n  kw: 'く',\n  qw: 'く',\n  q: 'く',\n  gw: 'ぐ',\n  sw: 'す',\n  ts: 'つ',\n  th: 'て',\n  tw: 'と',\n  dh: 'で',\n  dw: 'ど',\n  fw: 'ふ',\n  f: 'ふ',\n};\n\n/* eslint-enable */\nfunction createRomajiToKanaMap() {\n  const kanaTree = transform(BASIC_KUNREI);\n  // pseudo partial application\n  const subtreeOf = (string) => getSubTreeOf(kanaTree, string);\n\n  // add tya, sya, etc.\n  Object.entries(CONSONANTS).forEach(([consonant, yKana]) => {\n    Object.entries(SMALL_Y).forEach(([roma, kana]) => {\n      // for example kyo -> き + ょ\n      subtreeOf(consonant + roma)[''] = yKana + kana;\n    });\n  });\n\n  Object.entries(SPECIAL_SYMBOLS).forEach(([symbol, jsymbol]) => {\n    subtreeOf(symbol)[''] = jsymbol;\n  });\n\n  // things like うぃ, くぃ, etc.\n  Object.entries(AIUEO_CONSTRUCTIONS).forEach(([consonant, aiueoKana]) => {\n    Object.entries(SMALL_VOWELS).forEach(([vowel, kana]) => {\n      const subtree = subtreeOf(consonant + vowel);\n      subtree[''] = aiueoKana + kana;\n    });\n  });\n\n  // different ways to write ん\n  ['n', \"n'\", 'xn'].forEach((nChar) => {\n    subtreeOf(nChar)[''] = 'ん';\n  });\n\n  // c is equivalent to k, but not for chi, cha, etc. that's why we have to make a copy of k\n  kanaTree.c = JSON.parse(JSON.stringify(kanaTree.k));\n\n  Object.entries(ALIASES).forEach(([string, alternative]) => {\n    const allExceptLast = string.slice(0, string.length - 1);\n    const last = string.charAt(string.length - 1);\n    const parentTree = subtreeOf(allExceptLast);\n    // copy to avoid recursive containment\n    parentTree[last] = JSON.parse(JSON.stringify(subtreeOf(alternative)));\n  });\n\n  function getAlternatives(string) {\n    return [...Object.entries(ALIASES), ...[['c', 'k']]].reduce(\n      (list, [alt, roma]) => (string.startsWith(roma) ? list.concat(string.replace(roma, alt)) : list),\n      []\n    );\n  }\n\n  Object.entries(SMALL_LETTERS).forEach(([kunreiRoma, kana]) => {\n    const last = (char) => char.charAt(char.length - 1);\n    const allExceptLast = (chars) => chars.slice(0, chars.length - 1);\n    const xRoma = `x${kunreiRoma}`;\n    const xSubtree = subtreeOf(xRoma);\n    xSubtree[''] = kana;\n\n    // ltu -> xtu -> っ\n    const parentTree = subtreeOf(`l${allExceptLast(kunreiRoma)}`);\n    parentTree[last(kunreiRoma)] = xSubtree;\n\n    // ltsu -> ltu -> っ\n    getAlternatives(kunreiRoma).forEach((altRoma) => {\n      ['l', 'x'].forEach((prefix) => {\n        const altParentTree = subtreeOf(prefix + allExceptLast(altRoma));\n        altParentTree[last(altRoma)] = subtreeOf(prefix + kunreiRoma);\n      });\n    });\n  });\n\n  Object.entries(SPECIAL_CASES).forEach(([string, kana]) => {\n    subtreeOf(string)[''] = kana;\n  });\n\n  // add kka, tta, etc.\n  function addTsu(tree) {\n    return Object.entries(tree).reduce((tsuTree, [key, value]) => {\n      if (!key) {\n        // we have reached the bottom of this branch\n        // eslint-disable-next-line no-param-reassign\n        tsuTree[key] = `っ${value}`;\n      } else {\n        // more subtrees\n        // eslint-disable-next-line no-param-reassign\n        tsuTree[key] = addTsu(value);\n      }\n      return tsuTree;\n    }, {});\n  }\n  // have to explicitly name c here, because we made it a copy of k, not a reference\n  [...Object.keys(CONSONANTS), 'c', 'y', 'w', 'j'].forEach((consonant) => {\n    const subtree = kanaTree[consonant];\n    subtree[consonant] = addTsu(subtree);\n  });\n  // nn should not be っん\n  delete kanaTree.n.n;\n  // solidify the results, so that there there is referential transparency within the tree\n  return Object.freeze(JSON.parse(JSON.stringify(kanaTree)));\n}\n\nlet romajiToKanaMap = null;\n\nexport function getRomajiToKanaTree() {\n  if (romajiToKanaMap == null) {\n    romajiToKanaMap = createRomajiToKanaMap();\n  }\n  return romajiToKanaMap;\n}\n\nexport const USE_OBSOLETE_KANA_MAP = createCustomMapping({\n  wi: 'ゐ',\n  we: 'ゑ',\n});\n\nexport function IME_MODE_MAP(map) {\n  // in IME mode, we do not want to convert single ns\n  const mapCopy = JSON.parse(JSON.stringify(map));\n  mapCopy.n.n = { '': 'ん' };\n  mapCopy.n[' '] = { '': 'ん' };\n  return mapCopy;\n}\n","import isEmpty from './isEmpty';\nimport isCharInRange from './isCharInRange';\nimport { LATIN_UPPERCASE_START, LATIN_UPPERCASE_END } from '../constants';\n\n/**\n * Tests if char is in English unicode uppercase range\n * @param  {String} char\n * @return {Boolean}\n */\nfunction isCharUpperCase(char = '') {\n  if (isEmpty(char)) return false;\n  return isCharInRange(char, LATIN_UPPERCASE_START, LATIN_UPPERCASE_END);\n}\n\nexport default isCharUpperCase;\n","import isEmpty from './isEmpty';\nimport { PROLONGED_SOUND_MARK } from '../constants';\n\n/**\n * Returns true if char is 'ー'\n * @param  {String} char to test\n * @return {Boolean}\n */\nfunction isCharLongDash(char = '') {\n  if (isEmpty(char)) return false;\n  return char.charCodeAt(0) === PROLONGED_SOUND_MARK;\n}\n\nexport default isCharLongDash;\n","import isEmpty from './isEmpty';\nimport { KANA_SLASH_DOT } from '../constants';\n\n/**\n * Tests if char is '・'\n * @param  {String} char\n * @return {Boolean} true if '・'\n */\nfunction isCharSlashDot(char = '') {\n  if (isEmpty(char)) return false;\n  return char.charCodeAt(0) === KANA_SLASH_DOT;\n}\n\nexport default isCharSlashDot;\n","import isEmpty from './isEmpty';\nimport isCharLongDash from './isCharLongDash';\nimport isCharInRange from './isCharInRange';\nimport {\n  HIRAGANA_START,\n  HIRAGANA_END,\n} from '../constants';\n\n/**\n * Tests a character. Returns true if the character is [Hiragana](https://en.wikipedia.org/wiki/Hiragana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharHiragana(char = '') {\n  if (isEmpty(char)) return false;\n  if (isCharLongDash(char)) return true;\n  return isCharInRange(char, HIRAGANA_START, HIRAGANA_END);\n}\n\nexport default isCharHiragana;\n","import { KATAKANA_START, HIRAGANA_START } from '../constants';\n\nimport isCharLongDash from './isCharLongDash';\nimport isCharSlashDot from './isCharSlashDot';\nimport isCharHiragana from './isCharHiragana';\n\n/**\n * Convert [Hiragana](https://en.wikipedia.org/wiki/Hiragana) to [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * Passes through any non-hiragana chars\n * @private\n * @param  {String} [input=''] text input\n * @return {String} converted text\n * @example\n * hiraganaToKatakana('ひらがな')\n * // => \"ヒラガナ\"\n * hiraganaToKatakana('ひらがな is a type of kana')\n * // => \"ヒラガナ is a type of kana\"\n */\nfunction hiraganaToKatakana(input = '') {\n  const kata = [];\n  input.split('').forEach((char) => {\n    // Short circuit to avoid incorrect codeshift for 'ー' and '・'\n    if (isCharLongDash(char) || isCharSlashDot(char)) {\n      kata.push(char);\n    } else if (isCharHiragana(char)) {\n      // Shift charcode.\n      const code = char.charCodeAt(0) + (KATAKANA_START - HIRAGANA_START);\n      const kataChar = String.fromCharCode(code);\n      kata.push(kataChar);\n    } else {\n      // Pass non-hiragana chars through\n      kata.push(char);\n    }\n  });\n  return kata.join('');\n}\n\nexport default hiraganaToKatakana;\n","import memoizeOne from 'memoize-one';\nimport { dequal } from 'dequal';\n\nimport { TO_KANA_METHODS } from './constants';\nimport mergeWithDefaultOptions from './utils/mergeWithDefaultOptions';\nimport {\n  getRomajiToKanaTree,\n  IME_MODE_MAP,\n  USE_OBSOLETE_KANA_MAP,\n} from './utils/romajiToKanaMap';\nimport { applyMapping, mergeCustomMapping } from './utils/kanaMapping';\nimport isCharUpperCase from './utils/isCharUpperCase';\nimport hiraganaToKatakana from './utils/hiraganaToKatakana';\n\n// memoize and deeply compare args so we only recreate when necessary\nexport const createRomajiToKanaMap = memoizeOne(\n  (IMEMode, useObsoleteKana, customKanaMapping) => {\n    let map = getRomajiToKanaTree();\n\n    map = IMEMode ? IME_MODE_MAP(map) : map;\n    map = useObsoleteKana ? USE_OBSOLETE_KANA_MAP(map) : map;\n\n    if (customKanaMapping) {\n      map = mergeCustomMapping(map, customKanaMapping);\n    }\n\n    return map;\n  },\n  dequal\n);\n\n/**\n * Convert [Romaji](https://en.wikipedia.org/wiki/Romaji) to [Kana](https://en.wikipedia.org/wiki/Kana), lowercase text will result in [Hiragana](https://en.wikipedia.org/wiki/Hiragana) and uppercase text will result in [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} [input=''] text\n * @param  {DefaultOptions} [options=defaultOptions]\n * @return {String} converted text\n * @example\n * toKana('onaji BUTTSUUJI')\n * // => 'おなじ ブッツウジ'\n * toKana('ONAJI buttsuuji')\n * // => 'オナジ ぶっつうじ'\n * toKana('座禅‘zazen’スタイル')\n * // => '座禅「ざぜん」スタイル'\n * toKana('batsuge-mu')\n * // => 'ばつげーむ'\n * toKana('!?.:/,~-‘’“”[](){}') // Punctuation conversion\n * // => '！？。：・、〜ー「」『』［］（）｛｝'\n * toKana('we', { useObsoleteKana: true })\n * // => 'ゑ'\n * toKana('wanakana', { customKanaMapping: { na: 'に', ka: 'bana' } });\n * // => 'わにbanaに'\n */\nexport function toKana(input = '', options = {}, map) {\n  let config;\n  if (!map) {\n    config = mergeWithDefaultOptions(options);\n    map = createRomajiToKanaMap(\n      config.IMEMode,\n      config.useObsoleteKana,\n      config.customKanaMapping\n    );\n  } else {\n    config = options;\n  }\n\n  // throw away the substring index information and just concatenate all the kana\n  return splitIntoConvertedKana(input, config, map)\n    .map((kanaToken) => {\n      const [start, end, kana] = kanaToken;\n      if (kana === null) {\n        // haven't converted the end of the string, since we are in IME mode\n        return input.slice(start);\n      }\n      const enforceHiragana = config.IMEMode === TO_KANA_METHODS.HIRAGANA;\n      const enforceKatakana = config.IMEMode === TO_KANA_METHODS.KATAKANA\n        || [...input.slice(start, end)].every(isCharUpperCase);\n\n      return enforceHiragana || !enforceKatakana\n        ? kana\n        : hiraganaToKatakana(kana);\n    })\n    .join('');\n}\n\n/**\n *\n * @private\n * @param {String} [input=''] input text\n * @param {DefaultOptions} [options=defaultOptions] toKana options\n * @param {Object} [map] custom mapping\n * @returns {Array[]} [[start, end, token]]\n * @example\n * splitIntoConvertedKana('buttsuuji')\n * // => [[0, 2, 'ぶ'], [2, 6, 'っつ'], [6, 7, 'う'], [7, 9, 'じ']]\n */\nexport function splitIntoConvertedKana(input = '', options = {}, map) {\n  const { IMEMode, useObsoleteKana, customKanaMapping } = options;\n\n  if (!map) {\n    map = createRomajiToKanaMap(IMEMode, useObsoleteKana, customKanaMapping);\n  }\n\n  return applyMapping(input.toLowerCase(), map, !IMEMode);\n}\n\nexport default toKana;\n","import isJapanese from '../isJapanese';\nimport toKana, { createRomajiToKanaMap } from '../toKana';\nimport mergeWithDefaultOptions from './mergeWithDefaultOptions';\n\nlet LISTENERS = [];\n/**\n * Automagically replaces input values with converted text to kana\n * @param  {defaultOptions} [options] user config overrides, default conversion is toKana()\n * @return {Function} event handler with bound options\n * @private\n */\nexport function makeOnInput(options) {\n  let prevInput;\n\n  // Enforce IMEMode if not already specified\n  const mergedConfig = Object.assign({}, mergeWithDefaultOptions(options), {\n    IMEMode: options.IMEMode || true,\n  });\n\n  const preConfiguredMap = createRomajiToKanaMap(\n    mergedConfig.IMEMode,\n    mergedConfig.useObsoleteKana,\n    mergedConfig.customKanaMapping\n  );\n\n  const triggers = [\n    ...Object.keys(preConfiguredMap),\n    ...Object.keys(preConfiguredMap).map((char) => char.toUpperCase()),\n  ];\n\n  return function onInput({ target }) {\n    if (\n      target.value !== prevInput\n      && target.dataset.ignoreComposition !== 'true'\n    ) {\n      convertInput(target, mergedConfig, preConfiguredMap, triggers, prevInput);\n    }\n  };\n}\n\nexport function convertInput(target, options, map, triggers, prevInput) {\n  const [head, textToConvert, tail] = splitInput(\n    target.value,\n    target.selectionEnd,\n    triggers\n  );\n  const convertedText = toKana(textToConvert, options, map);\n  const changed = textToConvert !== convertedText;\n\n  if (changed) {\n    const newCursor = head.length + convertedText.length;\n    const newValue = head + convertedText + tail;\n    // eslint-disable-next-line no-param-reassign\n    target.value = newValue;\n    // eslint-disable-next-line no-param-reassign\n    prevInput = newValue;\n\n    if (tail.length) {\n      // push later on event loop (otherwise mid-text insertion can be 1 char too far to the right)\n      setTimeout(() => target.setSelectionRange(newCursor, newCursor), 1);\n    } else {\n      target.setSelectionRange(newCursor, newCursor);\n    }\n  } else {\n    // eslint-disable-next-line no-param-reassign\n    prevInput = target.value;\n  }\n}\n\nexport function onComposition({ type, target, data }) {\n  // navigator.platform is not 100% reliable for singling out all OS,\n  // but for determining desktop \"Mac OS\" it is effective enough.\n  const isMacOS = /Mac/.test(window.navigator && window.navigator.platform);\n  // We don't want to ignore on Android:\n  // https://github.com/WaniKani/WanaKana/issues/82\n  // But MacOS IME auto-closes if we don't ignore:\n  // https://github.com/WaniKani/WanaKana/issues/71\n  // Other platform Japanese IMEs pass through happily\n  if (isMacOS) {\n    if (type === 'compositionupdate' && isJapanese(data)) {\n      // eslint-disable-next-line no-param-reassign\n      target.dataset.ignoreComposition = 'true';\n    }\n\n    if (type === 'compositionend') {\n      // eslint-disable-next-line no-param-reassign\n      target.dataset.ignoreComposition = 'false';\n    }\n  }\n}\n\nexport function trackListeners(id, inputHandler, compositionHandler) {\n  LISTENERS = LISTENERS.concat({\n    id,\n    inputHandler,\n    compositionHandler,\n  });\n}\n\nexport function untrackListeners({ id: targetId }) {\n  LISTENERS = LISTENERS.filter(({ id }) => id !== targetId);\n}\n\nexport function findListeners(el) {\n  return (\n    el && LISTENERS.find(({ id }) => id === el.getAttribute('data-wanakana-id'))\n  );\n}\n\n// Handle non-terminal inserted input conversion:\n// | -> わ| -> わび| -> わ|び -> わs|び -> わsh|び -> わshi|び -> わし|び\n// or multiple ambiguous positioning (to select which \"s\" to work from)\n// こsこs|こsこ -> こsこso|こsこ -> こsこそ|こsこ\nexport function splitInput(text = '', cursor = 0, triggers = []) {\n  let head;\n  let toConvert;\n  let tail;\n\n  if (cursor === 0 && triggers.includes(text[0])) {\n    [head, toConvert, tail] = workFromStart(text, triggers);\n  } else if (cursor > 0) {\n    [head, toConvert, tail] = workBackwards(text, cursor);\n  } else {\n    [head, toConvert] = takeWhileAndSlice(\n      text,\n      (char) => !triggers.includes(char)\n    );\n    [toConvert, tail] = takeWhileAndSlice(\n      toConvert,\n      (char) => !isJapanese(char)\n    );\n  }\n\n  return [head, toConvert, tail];\n}\n\nfunction workFromStart(text, catalystChars) {\n  return [\n    '',\n    ...takeWhileAndSlice(\n      text,\n      (char) => catalystChars.includes(char) || !isJapanese(char, /[0-9]/)\n    ),\n  ];\n}\n\nfunction workBackwards(text = '', startIndex = 0) {\n  const [toConvert, head] = takeWhileAndSlice(\n    [...text.slice(0, startIndex)].reverse(),\n    (char) => !isJapanese(char)\n  );\n  return [\n    head.reverse().join(''),\n    toConvert\n      .split('')\n      .reverse()\n      .join(''),\n    text.slice(startIndex),\n  ];\n}\n\nfunction takeWhileAndSlice(source = {}, predicate = (x) => !!x) {\n  const result = [];\n  const { length } = source;\n  let i = 0;\n  while (i < length && predicate(source[i], i)) {\n    result.push(source[i]);\n    i += 1;\n  }\n  return [result.join(''), source.slice(i)];\n}\n","/* eslint-disable no-console */\nconst onInput = ({ target: { value, selectionStart, selectionEnd } }) => console.log('input:', { value, selectionStart, selectionEnd });\nconst onCompositionStart = () => console.log('compositionstart');\nconst onCompositionUpdate = ({\n  target: { value, selectionStart, selectionEnd },\n  data,\n}) => console.log('compositionupdate', {\n  data,\n  value,\n  selectionStart,\n  selectionEnd,\n});\nconst onCompositionEnd = () => console.log('compositionend');\n\nconst events = {\n  input: onInput,\n  compositionstart: onCompositionStart,\n  compositionupdate: onCompositionUpdate,\n  compositionend: onCompositionEnd,\n};\n\nexport const addDebugListeners = (input) => {\n  Object.entries(events).forEach(([event, handler]) => input.addEventListener(event, handler)\n  );\n};\n\nexport const removeDebugListeners = (input) => {\n  Object.entries(events).forEach(([event, handler]) => input.removeEventListener(event, handler)\n  );\n};\n","import { makeOnInput, onComposition, trackListeners } from './utils/dom';\nimport { addDebugListeners } from './utils/logInputEvents';\n\nconst ELEMENTS = ['TEXTAREA', 'INPUT'];\n\nlet idCounter = 0;\nconst newId = () => {\n  idCounter += 1;\n  return `${Date.now()}${idCounter}`;\n};\n\n/**\n * Binds eventListener for 'input' events to an input field to automagically replace values with kana\n * Can pass `{ IMEMode: 'toHiragana' || 'toKatakana' }` to enforce kana conversion type\n * @param  {HTMLElement} element textarea, input[type=\"text\"] etc\n * @param  {DefaultOptions} [options=defaultOptions] defaults to { IMEMode: true } using `toKana`\n * @example\n * bind(document.querySelector('#myInput'));\n */\nfunction bind(element = {}, options = {}, debug = false) {\n  if (!ELEMENTS.includes(element.nodeName)) {\n    throw new Error(\n      `Element provided to Wanakana bind() was not a valid input or textarea element.\\n Received: (${JSON.stringify(\n        element\n      )})`\n    );\n  }\n  if (element.hasAttribute('data-wanakana-id')) {\n    return;\n  }\n  const onInput = makeOnInput(options);\n  const id = newId();\n  const attributes = [\n    { name: 'data-wanakana-id', value: id },\n    { name: 'lang', value: 'ja' },\n    { name: 'autoCapitalize', value: 'none' },\n    { name: 'autoCorrect', value: 'off' },\n    { name: 'autoComplete', value: 'off' },\n    { name: 'spellCheck', value: 'false' },\n  ];\n  const previousAttributes = {};\n  attributes.forEach((attribute) => {\n    previousAttributes[attribute.name] = element.getAttribute(attribute.name);\n    element.setAttribute(attribute.name, attribute.value);\n  });\n  element.dataset.previousAttributes = JSON.stringify(previousAttributes);\n  element.addEventListener('input', onInput);\n  element.addEventListener('compositionupdate', onComposition);\n  element.addEventListener('compositionend', onComposition);\n  trackListeners(id, onInput, onComposition);\n  if (debug === true) {\n    addDebugListeners(element);\n  }\n}\n\nexport default bind;\n","import isEmpty from './isEmpty';\nimport isCharInRange from './isCharInRange';\nimport { ROMAJI_RANGES } from '../constants';\n\n/**\n * Tests a character. Returns true if the character is [Romaji](https://en.wikipedia.org/wiki/Romaji) (allowing [Hepburn romanisation](https://en.wikipedia.org/wiki/Hepburn_romanization))\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharRomaji(char = '') {\n  if (isEmpty(char)) return false;\n  return ROMAJI_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\nexport default isCharRomaji;\n","import typeOf from './utils/typeOf';\nimport isEmpty from './utils/isEmpty';\nimport isCharRomaji from './utils/isCharRomaji';\n\n/**\n * Test if `input` is [Romaji](https://en.wikipedia.org/wiki/Romaji) (allowing [Hepburn romanisation](https://en.wikipedia.org/wiki/Hepburn_romanization))\n * @param  {String} [input=''] text\n * @param  {Regexp} [allowed] additional test allowed to pass for each char\n * @return {Boolean} true if [Romaji](https://en.wikipedia.org/wiki/Romaji)\n * @example\n * isRomaji('Tōkyō and Ōsaka')\n * // => true\n * isRomaji('12a*b&c-d')\n * // => true\n * isRomaji('あアA')\n * // => false\n * isRomaji('お願い')\n * // => false\n * isRomaji('a！b&cーd') // Zenkaku punctuation fails\n * // => false\n * isRomaji('a！b&cーd', /[！ー]/)\n * // => true\n */\nfunction isRomaji(input = '', allowed) {\n  const augmented = typeOf(allowed) === 'regexp';\n  return isEmpty(input)\n    ? false\n    : [...input].every((char) => {\n      const isRoma = isCharRomaji(char);\n      return !augmented ? isRoma : isRoma || allowed.test(char);\n    });\n}\n\nexport default isRomaji;\n","import {\n  KATAKANA_START,\n  KATAKANA_END,\n} from '../constants';\n\nimport isCharInRange from './isCharInRange';\n\n/**\n * Tests a character. Returns true if the character is [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharKatakana(char = '') {\n  return isCharInRange(char, KATAKANA_START, KATAKANA_END);\n}\n\nexport default isCharKatakana;\n","import isEmpty from './isEmpty';\nimport isCharHiragana from './isCharHiragana';\nimport isCharKatakana from './isCharKatakana';\n\n/**\n * Tests a character. Returns true if the character is [Hiragana](https://en.wikipedia.org/wiki/Hiragana) or [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharKana(char = '') {\n  if (isEmpty(char)) return false;\n  return isCharHiragana(char) || isCharKatakana(char);\n}\n\nexport default isCharKana;\n","import isEmpty from './utils/isEmpty';\nimport isCharKana from './utils/isCharKana';\n\n/**\n * Test if `input` is [Kana](https://en.wikipedia.org/wiki/Kana) ([Katakana](https://en.wikipedia.org/wiki/Katakana) and/or [Hiragana](https://en.wikipedia.org/wiki/Hiragana))\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Kana](https://en.wikipedia.org/wiki/Kana)\n * @example\n * isKana('あ')\n * // => true\n * isKana('ア')\n * // => true\n * isKana('あーア')\n * // => true\n * isKana('A')\n * // => false\n * isKana('あAア')\n * // => false\n */\nfunction isKana(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharKana);\n}\n\nexport default isKana;\n","import isEmpty from './utils/isEmpty';\nimport isCharHiragana from './utils/isCharHiragana';\n\n/**\n * Test if `input` is [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @example\n * isHiragana('げーむ')\n * // => true\n * isHiragana('A')\n * // => false\n * isHiragana('あア')\n * // => false\n */\nfunction isHiragana(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharHiragana);\n}\n\nexport default isHiragana;\n","import isEmpty from './utils/isEmpty';\nimport isCharKatakana from './utils/isCharKatakana';\n\n/**\n * Test if `input` is [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @example\n * isKatakana('ゲーム')\n * // => true\n * isKatakana('あ')\n * // => false\n * isKatakana('A')\n * // => false\n * isKatakana('あア')\n * // => false\n */\nfunction isKatakana(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharKatakana);\n}\n\nexport default isKatakana;\n","import isEmpty from './isEmpty';\nimport { KANJI_ITERATION_MARK } from '../constants';\n\n/**\n * Returns true if char is '々'\n * @param  {String} char to test\n * @return {Boolean}\n */\nfunction isCharIterationMark(char = '') {\n  if (isEmpty(char)) return false;\n  return char.charCodeAt(0) === KANJI_ITERATION_MARK;\n}\n\nexport default isCharIterationMark;\n","import { KANJI_START, KANJI_END } from '../constants';\n\nimport isCharInRange from './isCharInRange';\nimport isCharIterationMark from './isCharIterationMark';\n/**\n * Tests a character. Returns true if the character is a CJK ideograph (kanji).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharKanji(char = '') {\n  return isCharInRange(char, KANJI_START, KANJI_END) || isCharIterationMark(char);\n}\n\nexport default isCharKanji;\n","import isEmpty from './utils/isEmpty';\nimport isCharKanji from './utils/isCharKanji';\n\n/**\n * Tests if `input` is [Kanji](https://en.wikipedia.org/wiki/Kanji) ([Japanese CJK ideographs](https://en.wikipedia.org/wiki/CJK_Unified_Ideographs))\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Kanji](https://en.wikipedia.org/wiki/Kanji)\n * @example\n * isKanji('刀')\n * // => true\n * isKanji('切腹')\n * // => true\n * isKanji('勢い')\n * // => false\n * isKanji('あAア')\n * // => false\n * isKanji('🐸')\n * // => false\n */\nfunction isKanji(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharKanji);\n}\n\nexport default isKanji;\n","import isKanji from './isKanji';\nimport isHiragana from './isHiragana';\nimport isKatakana from './isKatakana';\nimport isRomaji from './isRomaji';\n\n/**\n * Test if `input` contains a mix of [Romaji](https://en.wikipedia.org/wiki/Romaji) *and* [Kana](https://en.wikipedia.org/wiki/Kana), defaults to pass through [Kanji](https://en.wikipedia.org/wiki/Kanji)\n * @param  {String} input text\n * @param  {Object} [options={ passKanji: true }] optional config to pass through kanji\n * @return {Boolean} true if mixed\n * @example\n * isMixed('Abあア'))\n * // => true\n * isMixed('お腹A')) // ignores kanji by default\n * // => true\n * isMixed('お腹A', { passKanji: false }))\n * // => false\n * isMixed('ab'))\n * // => false\n * isMixed('あア'))\n * // => false\n */\nfunction isMixed(input = '', options = { passKanji: true }) {\n  const chars = [...input];\n  let hasKanji = false;\n  if (!options.passKanji) {\n    hasKanji = chars.some(isKanji);\n  }\n  return (chars.some(isHiragana) || chars.some(isKatakana)) && chars.some(isRomaji) && !hasKanji;\n}\n\nexport default isMixed;\n","import { KATAKANA_START, HIRAGANA_START } from '../constants';\n\nimport isCharLongDash from './isCharLongDash';\nimport isCharSlashDot from './isCharSlashDot';\nimport isCharKatakana from './isCharKatakana';\nconst isCharInitialLongDash = (char, index) => isCharLongDash(char) && index < 1;\nconst isCharInnerLongDash = (char, index) => isCharLongDash(char) && index > 0;\nconst isKanaAsSymbol = (char) => ['ヶ', 'ヵ'].includes(char);\nconst LONG_VOWELS = {\n  a: 'あ',\n  i: 'い',\n  u: 'う',\n  e: 'え',\n  o: 'う',\n};\n\n// inject toRomaji to avoid circular dependency between toRomaji <-> katakanaToHiragana\nfunction katakanaToHiragana(\n  input = '',\n  toRomaji,\n  { isDestinationRomaji, convertLongVowelMark } = {}\n) {\n  let previousKana = '';\n\n  return input\n    .split('')\n    .reduce((hira, char, index) => {\n      // Short circuit to avoid incorrect codeshift for 'ー' and '・'\n      if (\n        isCharSlashDot(char)\n        || isCharInitialLongDash(char, index)\n        || isKanaAsSymbol(char)\n      ) {\n        return hira.concat(char);\n      }\n\n      // Transform long vowels: 'オー' to 'おう'\n      if (\n        convertLongVowelMark\n        && previousKana\n        && isCharInnerLongDash(char, index)\n      ) {\n        // Transform previousKana back to romaji, and slice off the vowel\n        const romaji = toRomaji(previousKana).slice(-1);\n        // However, ensure 'オー' => 'おお' => 'oo' if this is a transform on the way to romaji\n        if (\n          isCharKatakana(input[index - 1])\n          && romaji === 'o'\n          && isDestinationRomaji\n        ) {\n          return hira.concat('お');\n        }\n        return hira.concat(LONG_VOWELS[romaji]);\n        // Transform all other chars\n      }\n\n      if (!isCharLongDash(char) && isCharKatakana(char)) {\n        const code = char.charCodeAt(0) + (HIRAGANA_START - KATAKANA_START);\n        const hiraChar = String.fromCharCode(code);\n        previousKana = hiraChar;\n        return hira.concat(hiraChar);\n      }\n\n      // Pass non katakana chars through\n      previousKana = '';\n      return hira.concat(char);\n    }, [])\n    .join('');\n}\n\nexport default katakanaToHiragana;\n","import { transform, getSubTreeOf } from './kanaMapping';\nimport { ROMANIZATIONS } from '../constants';\n\nlet kanaToHepburnMap = null;\n\n/* eslint-disable */\n// prettier-ignore\nconst BASIC_ROMAJI = {\n  あ:'a',    い:'i',   う:'u',   え:'e',    お:'o',\n  か:'ka',   き:'ki',  く:'ku',  け:'ke',   こ:'ko',\n  さ:'sa',   し:'shi', す:'su',  せ:'se',   そ:'so',\n  た:'ta',   ち:'chi', つ:'tsu', て:'te',   と:'to',\n  な:'na',   に:'ni',  ぬ:'nu',  ね:'ne',   の:'no',\n  は:'ha',   ひ:'hi',  ふ:'fu',  へ:'he',   ほ:'ho',\n  ま:'ma',   み:'mi',  む:'mu',  め:'me',   も:'mo',\n  ら:'ra',   り:'ri',  る:'ru',  れ:'re',   ろ:'ro',\n  や:'ya',   ゆ:'yu',  よ:'yo',\n  わ:'wa',   ゐ:'wi',  ゑ:'we',  を:'wo',\n  ん: 'n',\n  が:'ga',   ぎ:'gi',  ぐ:'gu',  げ:'ge',   ご:'go',\n  ざ:'za',   じ:'ji',  ず:'zu',  ぜ:'ze',   ぞ:'zo',\n  だ:'da',   ぢ:'ji',  づ:'zu',  で:'de',   ど:'do',\n  ば:'ba',   び:'bi',  ぶ:'bu',  べ:'be',   ぼ:'bo',\n  ぱ:'pa',   ぴ:'pi',  ぷ:'pu',  ぺ:'pe',   ぽ:'po',\n  ゔぁ:'va', ゔぃ:'vi', ゔ:'vu',  ゔぇ:'ve', ゔぉ:'vo',\n};\n/* eslint-enable  */\n\nconst SPECIAL_SYMBOLS = {\n  '。': '.',\n  '、': ',',\n  '：': ':',\n  '・': '/',\n  '！': '!',\n  '？': '?',\n  '〜': '~',\n  'ー': '-',\n  '「': '‘',\n  '」': '’',\n  '『': '“',\n  '』': '”',\n  '［': '[',\n  '］': ']',\n  '（': '(',\n  '）': ')',\n  '｛': '{',\n  '｝': '}',\n  '　': ' ',\n};\n\n// んい -> n'i\nconst AMBIGUOUS_VOWELS = ['あ', 'い', 'う', 'え', 'お', 'や', 'ゆ', 'よ'];\nconst SMALL_Y = { ゃ: 'ya', ゅ: 'yu', ょ: 'yo' };\nconst SMALL_Y_EXTRA = { ぃ: 'yi', ぇ: 'ye' };\nconst SMALL_AIUEO = {\n  ぁ: 'a',\n  ぃ: 'i',\n  ぅ: 'u',\n  ぇ: 'e',\n  ぉ: 'o',\n};\nconst YOON_KANA = [\n  'き',\n  'に',\n  'ひ',\n  'み',\n  'り',\n  'ぎ',\n  'び',\n  'ぴ',\n  'ゔ',\n  'く',\n  'ふ',\n];\nconst YOON_EXCEPTIONS = {\n  し: 'sh',\n  ち: 'ch',\n  じ: 'j',\n  ぢ: 'j',\n};\nconst SMALL_KANA = {\n  っ: '',\n  ゃ: 'ya',\n  ゅ: 'yu',\n  ょ: 'yo',\n  ぁ: 'a',\n  ぃ: 'i',\n  ぅ: 'u',\n  ぇ: 'e',\n  ぉ: 'o',\n};\n\n// going with the intuitive (yet incorrect) solution where っや -> yya and っぃ -> ii\n// in other words, just assume the sokuon could have been applied to anything\nconst SOKUON_WHITELIST = {\n  b: 'b',\n  c: 't',\n  d: 'd',\n  f: 'f',\n  g: 'g',\n  h: 'h',\n  j: 'j',\n  k: 'k',\n  m: 'm',\n  p: 'p',\n  q: 'q',\n  r: 'r',\n  s: 's',\n  t: 't',\n  v: 'v',\n  w: 'w',\n  x: 'x',\n  z: 'z',\n};\n\nfunction getKanaToHepburnTree() {\n  if (kanaToHepburnMap == null) {\n    kanaToHepburnMap = createKanaToHepburnMap();\n  }\n  return kanaToHepburnMap;\n}\n\nexport function getKanaToRomajiTree(romanization) {\n  switch (romanization) {\n    case ROMANIZATIONS.HEPBURN:\n      return getKanaToHepburnTree();\n    default:\n      return {};\n  }\n}\n\nfunction createKanaToHepburnMap() {\n  const romajiTree = transform(BASIC_ROMAJI);\n\n  const subtreeOf = (string) => getSubTreeOf(romajiTree, string);\n  const setTrans = (string, transliteration) => {\n    subtreeOf(string)[''] = transliteration;\n  };\n\n  Object.entries(SPECIAL_SYMBOLS).forEach(([jsymbol, symbol]) => {\n    subtreeOf(jsymbol)[''] = symbol;\n  });\n\n  [...Object.entries(SMALL_Y), ...Object.entries(SMALL_AIUEO)].forEach(\n    ([roma, kana]) => {\n      setTrans(roma, kana);\n    }\n  );\n\n  // きゃ -> kya\n  YOON_KANA.forEach((kana) => {\n    const firstRomajiChar = subtreeOf(kana)[''][0];\n    Object.entries(SMALL_Y).forEach(([yKana, yRoma]) => {\n      setTrans(kana + yKana, firstRomajiChar + yRoma);\n    });\n    // きぃ -> kyi\n    Object.entries(SMALL_Y_EXTRA).forEach(([yKana, yRoma]) => {\n      setTrans(kana + yKana, firstRomajiChar + yRoma);\n    });\n  });\n\n  Object.entries(YOON_EXCEPTIONS).forEach(([kana, roma]) => {\n    // じゃ -> ja\n    Object.entries(SMALL_Y).forEach(([yKana, yRoma]) => {\n      setTrans(kana + yKana, roma + yRoma[1]);\n    });\n    // じぃ -> jyi, じぇ -> je\n    setTrans(`${kana}ぃ`, `${roma}yi`);\n    setTrans(`${kana}ぇ`, `${roma}e`);\n  });\n\n  romajiTree['っ'] = resolveTsu(romajiTree);\n\n  Object.entries(SMALL_KANA).forEach(([kana, roma]) => {\n    setTrans(kana, roma);\n  });\n\n  AMBIGUOUS_VOWELS.forEach((kana) => {\n    setTrans(`ん${kana}`, `n'${subtreeOf(kana)['']}`);\n  });\n\n  // NOTE: could be re-enabled with an option?\n  // // んば -> mbo\n  // const LABIAL = [\n  //   'ば', 'び', 'ぶ', 'べ', 'ぼ',\n  //   'ぱ', 'ぴ', 'ぷ', 'ぺ', 'ぽ',\n  //   'ま', 'み', 'む', 'め', 'も',\n  // ];\n  // LABIAL.forEach((kana) => {\n  //   setTrans(`ん${kana}`, `m${subtreeOf(kana)['']}`);\n  // });\n\n  return Object.freeze(JSON.parse(JSON.stringify(romajiTree)));\n}\n\nfunction resolveTsu(tree) {\n  return Object.entries(tree).reduce((tsuTree, [key, value]) => {\n    if (!key) {\n      // we have reached the bottom of this branch\n      const consonant = value.charAt(0);\n      // eslint-disable-next-line no-param-reassign\n      tsuTree[key] = Object.keys(SOKUON_WHITELIST).includes(consonant)\n        ? SOKUON_WHITELIST[consonant] + value\n        : value;\n    } else {\n      // more subtrees\n      // eslint-disable-next-line no-param-reassign\n      tsuTree[key] = resolveTsu(value);\n    }\n    return tsuTree;\n  }, {});\n}\n","import memoizeOne from 'memoize-one';\nimport { dequal } from 'dequal';\n\nimport mergeWithDefaultOptions from './utils/mergeWithDefaultOptions';\nimport katakanaToHiragana from './utils/katakanaToHiragana';\nimport isKatakana from './isKatakana';\nimport { getKanaToRomajiTree } from './utils/kanaToRomajiMap';\nimport { applyMapping, mergeCustomMapping } from './utils/kanaMapping';\n\n// memoize and deeply compare args so we only recreate when necessary\nexport const createKanaToRomajiMap = memoizeOne(\n  (romanization, customRomajiMapping) => {\n    let map = getKanaToRomajiTree(romanization);\n\n    if (customRomajiMapping) {\n      map = mergeCustomMapping(map, customRomajiMapping);\n    }\n\n    return map;\n  },\n  dequal\n);\n\n/**\n * Convert kana to romaji\n * @param  {String} kana text input\n * @param  {DefaultOptions} [options=defaultOptions]\n * @param  {Object} map custom mapping\n * @return {String} converted text\n * @example\n * toRomaji('ひらがな　カタカナ')\n * // => 'hiragana katakana'\n * toRomaji('げーむ　ゲーム')\n * // => 'ge-mu geemu'\n * toRomaji('ひらがな　カタカナ', { upcaseKatakana: true })\n * // => 'hiragana KATAKANA'\n * toRomaji('つじぎり', { customRomajiMapping: { じ: 'zi', つ: 'tu', り: 'li' } });\n * // => 'tuzigili'\n */\nexport function toRomaji(input = '', options = {}, map) {\n  const config = mergeWithDefaultOptions(options);\n\n  if (!map) {\n    map = createKanaToRomajiMap(\n      config.romanization,\n      config.customRomajiMapping\n    );\n  }\n\n  // just throw away the substring index information and simply concatenate all the kana\n  return splitIntoRomaji(input, config, map)\n    .map((romajiToken) => {\n      const [start, end, romaji] = romajiToken;\n      const makeUpperCase = config.upcaseKatakana && isKatakana(input.slice(start, end));\n      return makeUpperCase ? romaji.toUpperCase() : romaji;\n    })\n    .join('');\n}\n\nfunction splitIntoRomaji(input, options, map) {\n  if (!map) {\n    map = createKanaToRomajiMap(\n      options.romanization,\n      options.customRomajiMapping\n    );\n  }\n\n  const config = Object.assign({}, { isDestinationRomaji: true }, options);\n\n  return applyMapping(\n    katakanaToHiragana(input, toRomaji, config),\n    map,\n    !options.IMEMode\n  );\n}\n\nexport default toRomaji;\n","import isEmpty from './isEmpty';\nimport { EN_PUNCTUATION_RANGES } from '../constants';\nimport isCharInRange from './isCharInRange';\n\n/**\n * Tests a character. Returns true if the character is considered English punctuation.\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharEnglishPunctuation(char = '') {\n  if (isEmpty(char)) return false;\n  return EN_PUNCTUATION_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\nexport default isCharEnglishPunctuation;\n","import isEmpty from './isEmpty';\nimport { JA_PUNCTUATION_RANGES } from '../constants';\nimport isCharInRange from './isCharInRange';\nimport isCharIterationMark from './isCharIterationMark';\n\n/**\n * Tests a character. Returns true if the character is considered Japanese punctuation.\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharJapanesePunctuation(char = '') {\n  if (isEmpty(char) || isCharIterationMark(char)) return false;\n  return JA_PUNCTUATION_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\nexport default isCharJapanesePunctuation;\n","import isEmpty from './utils/isEmpty';\nimport isCharEnglishPunctuation from './utils/isCharEnglishPunctuation';\nimport isCharJapanesePunctuation from './utils/isCharJapanesePunctuation';\nimport isCharRomaji from './utils/isCharRomaji';\nimport isCharKanji from './utils/isCharKanji';\nimport isCharHiragana from './utils/isCharHiragana';\nimport isCharKatakana from './utils/isCharKatakana';\nimport isCharJapanese from './utils/isCharJapanese';\n\nconst isCharEnSpace = (x) => x === ' ';\nconst isCharJaSpace = (x) => x === '　';\nconst isCharJaNum = (x) => /[０-９]/.test(x);\nconst isCharEnNum = (x) => /[0-9]/.test(x);\n\nexport const TOKEN_TYPES = {\n  EN: 'en',\n  JA: 'ja',\n  EN_NUM: 'englishNumeral',\n  JA_NUM: 'japaneseNumeral',\n  EN_PUNC: 'englishPunctuation',\n  JA_PUNC: 'japanesePunctuation',\n  KANJI: 'kanji',\n  HIRAGANA: 'hiragana',\n  KATAKANA: 'katakana',\n  SPACE: 'space',\n  OTHER: 'other',\n};\n\n// prettier-ignore\nexport function getType(input, compact = false) {\n  const {\n    EN, JA, EN_NUM, JA_NUM, EN_PUNC, JA_PUNC, KANJI, HIRAGANA, KATAKANA, SPACE, OTHER,\n  } = TOKEN_TYPES;\n\n  if (compact) {\n    switch (true) {\n      case isCharJaNum(input): return OTHER;\n      case isCharEnNum(input): return OTHER;\n      case isCharEnSpace(input): return EN;\n      case isCharEnglishPunctuation(input): return OTHER;\n      case isCharJaSpace(input): return JA;\n      case isCharJapanesePunctuation(input): return OTHER;\n      case isCharJapanese(input): return JA;\n      case isCharRomaji(input): return EN;\n      default: return OTHER;\n    }\n  } else {\n    switch (true) {\n      case isCharJaSpace(input): return SPACE;\n      case isCharEnSpace(input): return SPACE;\n      case isCharJaNum(input): return JA_NUM;\n      case isCharEnNum(input): return EN_NUM;\n      case isCharEnglishPunctuation(input): return EN_PUNC;\n      case isCharJapanesePunctuation(input): return JA_PUNC;\n      case isCharKanji(input): return KANJI;\n      case isCharHiragana(input): return HIRAGANA;\n      case isCharKatakana(input): return KATAKANA;\n      case isCharJapanese(input): return JA;\n      case isCharRomaji(input): return EN;\n      default: return OTHER;\n    }\n  }\n}\n\n/**\n * Splits input into array of strings separated by opinionated token types\n * `'en', 'ja', 'englishNumeral', 'japaneseNumeral','englishPunctuation', 'japanesePunctuation','kanji', 'hiragana', 'katakana', 'space', 'other'`.\n * If `{ compact: true }` then many same-language tokens are combined (spaces + text, kanji + kana, numeral + punctuation).\n * If `{ detailed: true }` then return array will contain `{ type, value }` instead of `'value'`\n * @param  {String} input text\n * @param  {Object} [options={ compact: false, detailed: false}] options to modify output style\n * @return {String|Object[]} text split into tokens containing values, or detailed object\n * @example\n * tokenize('ふふフフ')\n * // ['ふふ', 'フフ']\n *\n * tokenize('感じ')\n * // ['感', 'じ']\n *\n * tokenize('人々')\n * // ['人々']\n *\n * tokenize('truly 私は悲しい')\n * // ['truly', ' ', '私', 'は', '悲', 'しい']\n *\n * tokenize('truly 私は悲しい', { compact: true })\n * // ['truly ', '私は悲しい']\n *\n * tokenize('5romaji here...!?人々漢字ひらがなカタ　カナ４「ＳＨＩＯ」。！')\n * // [ '5', 'romaji', ' ', 'here', '...!?', '人々漢字', 'ひらがな', 'カタ', '　', 'カナ', '４', '「', 'ＳＨＩＯ', '」。！']\n *\n * tokenize('5romaji here...!?人々漢字ひらがなカタ　カナ４「ＳＨＩＯ」。！', { compact: true })\n * // [ '5', 'romaji here', '...!?', '人々漢字ひらがなカタ　カナ', '４「', 'ＳＨＩＯ', '」。！']\n *\n * tokenize('5romaji here...!?人々漢字ひらがなカタ　カナ４「ＳＨＩＯ」。！ لنذهب', { detailed: true })\n * // [\n *  { type: 'englishNumeral', value: '5' },\n *  { type: 'en', value: 'romaji' },\n *  { type: 'space', value: ' ' },\n *  { type: 'en', value: 'here' },\n *  { type: 'englishPunctuation', value: '...!?' },\n *  { type: 'kanji', value: '人々漢字' },\n *  { type: 'hiragana', value: 'ひらがな' },\n *  { type: 'katakana', value: 'カタ' },\n *  { type: 'space', value: '　' },\n *  { type: 'katakana', value: 'カナ' },\n *  { type: 'japaneseNumeral', value: '４' },\n *  { type: 'japanesePunctuation', value: '「' },\n *  { type: 'ja', value: 'ＳＨＩＯ' },\n *  { type: 'japanesePunctuation', value: '」。！' },\n *  { type: 'space', value: ' ' },\n *  { type: 'other', value: 'لنذهب' },\n * ]\n *\n * tokenize('5romaji here...!?人々漢字ひらがなカタ　カナ４「ＳＨＩＯ」。！ لنذهب', { compact: true, detailed: true})\n * // [\n *  { type: 'other', value: '5' },\n *  { type: 'en', value: 'romaji here' },\n *  { type: 'other', value: '...!?' },\n *  { type: 'ja', value: '人々漢字ひらがなカタ　カナ' },\n *  { type: 'other', value: '４「' },\n *  { type: 'ja', value: 'ＳＨＩＯ' },\n *  { type: 'other', value: '」。！' },\n *  { type: 'en', value: ' ' },\n *  { type: 'other', value: 'لنذهب' },\n *]\n */\nfunction tokenize(input, { compact = false, detailed = false } = {}) {\n  if (input == null || isEmpty(input)) {\n    return [];\n  }\n  const chars = [...input];\n  let initial = chars.shift();\n  let prevType = getType(initial, compact);\n  initial = detailed ? { type: prevType, value: initial } : initial;\n\n  const result = chars.reduce(\n    (tokens, char) => {\n      const currType = getType(char, compact);\n      const sameType = currType === prevType;\n      prevType = currType;\n      let newValue = char;\n\n      if (sameType) {\n        newValue = (detailed ? tokens.pop().value : tokens.pop()) + newValue;\n      }\n\n      return detailed\n        ? tokens.concat({ type: currType, value: newValue })\n        : tokens.concat(newValue);\n    },\n    [initial]\n  );\n  return result;\n}\n\nexport default tokenize;\n","import isJapanese from './isJapanese';\nimport isKana from './isKana';\nimport isKanji from './isKanji';\nimport tokenize from './tokenize';\n\nconst isLeadingWithoutInitialKana = (input, leading) => leading && !isKana(input[0]);\nconst isTrailingWithoutFinalKana = (input, leading) => !leading && !isKana(input[input.length - 1]);\nconst isInvalidMatcher = (input, matchKanji) =>\n  (matchKanji && ![...matchKanji].some(isKanji)) || (!matchKanji && isKana(input));\n\n/**\n * Strips [Okurigana](https://en.wikipedia.org/wiki/Okurigana)\n * @param  {String} input text\n * @param  {Object} [options={ leading: false, matchKanji: '' }] optional config\n * @return {String} text with okurigana removed\n * @example\n * stripOkurigana('踏み込む')\n * // => '踏み込'\n * stripOkurigana('お祝い')\n * // => 'お祝'\n * stripOkurigana('お腹', { leading: true });\n * // => '腹'\n * stripOkurigana('ふみこむ', { matchKanji: '踏み込む' });\n * // => 'ふみこ'\n * stripOkurigana('おみまい', { matchKanji: 'お祝い', leading: true });\n * // => 'みまい'\n */\nfunction stripOkurigana(input = '', { leading = false, matchKanji = '' } = {}) {\n  if (\n    !isJapanese(input) ||\n    isLeadingWithoutInitialKana(input, leading) ||\n    isTrailingWithoutFinalKana(input, leading) ||\n    isInvalidMatcher(input, matchKanji)\n  ) {\n    return input;\n  }\n\n  const chars = matchKanji || input;\n  const okuriganaRegex = new RegExp(\n    leading ? `^${tokenize(chars).shift()}` : `${tokenize(chars).pop()}$`\n  );\n  return input.replace(okuriganaRegex, '');\n}\n\nexport default stripOkurigana;\n","import mergeWithDefaultOptions from './utils/mergeWithDefaultOptions';\nimport katakanaToHiragana from './utils/katakanaToHiragana';\nimport isCharEnglishPunctuation from './utils/isCharEnglishPunctuation';\nimport isRomaji from './isRomaji';\nimport isMixed from './isMixed';\nimport toKana from './toKana';\nimport toRomaji from './toRomaji';\n\n/**\n * Convert input to [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @param  {String} [input=''] text\n * @param  {DefaultOptions} [options=defaultOptions]\n * @return {String} converted text\n * @example\n * toHiragana('toukyou, オオサカ')\n * // => 'とうきょう、　おおさか'\n * toHiragana('only カナ', { passRomaji: true })\n * // => 'only かな'\n * toHiragana('wi')\n * // => 'うぃ'\n * toHiragana('wi', { useObsoleteKana: true })\n * // => 'ゐ'\n */\nfunction toHiragana(input = '', options = {}) {\n  const config = mergeWithDefaultOptions(options);\n  if (config.passRomaji) {\n    return katakanaToHiragana(input, toRomaji, config);\n  }\n\n  if (isMixed(input, { passKanji: true })) {\n    const convertedKatakana = katakanaToHiragana(input, toRomaji, config);\n    return toKana(convertedKatakana.toLowerCase(), config);\n  }\n\n  if (isRomaji(input) || isCharEnglishPunctuation(input)) {\n    return toKana(input.toLowerCase(), config);\n  }\n\n  return katakanaToHiragana(input, toRomaji, config);\n}\n\nexport default toHiragana;\n","import mergeWithDefaultOptions from './utils/mergeWithDefaultOptions';\nimport hiraganaToKatakana from './utils/hiraganaToKatakana';\nimport isCharEnglishPunctuation from './utils/isCharEnglishPunctuation';\nimport toKana from './toKana';\nimport isRomaji from './isRomaji';\nimport isMixed from './isMixed';\n\n/**\n * Convert input to [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @param  {String} [input=''] text\n * @param  {DefaultOptions} [options=defaultOptions]\n * @return {String} converted text\n * @example\n * toKatakana('toukyou, おおさか')\n * // => 'トウキョウ、　オオサカ'\n * toKatakana('only かな', { passRomaji: true })\n * // => 'only カナ'\n * toKatakana('wi')\n * // => 'ウィ'\n * toKatakana('wi', { useObsoleteKana: true })\n * // => 'ヰ'\n */\nfunction toKatakana(input = '', options = {}) {\n  const mergedOptions = mergeWithDefaultOptions(options);\n  if (mergedOptions.passRomaji) {\n    return hiraganaToKatakana(input);\n  }\n\n  if (isMixed(input) || isRomaji(input) || isCharEnglishPunctuation(input)) {\n    const hiragana = toKana(input.toLowerCase(), mergedOptions);\n    return hiraganaToKatakana(hiragana);\n  }\n\n  return hiraganaToKatakana(input);\n}\n\nexport default toKatakana;\n","import { findListeners, untrackListeners } from './utils/dom';\nimport { removeDebugListeners } from './utils/logInputEvents';\n\n/**\n * Unbinds eventListener from input field\n * @param  {HTMLElement} element textarea, input\n */\nexport function unbind(element, debug = false) {\n  const listeners = findListeners(element);\n  if (listeners == null) {\n    throw new Error(\n      `Element provided to Wanakana unbind() had no listener registered.\\n Received: ${JSON.stringify(\n        element\n      )}`\n    );\n  }\n  const { inputHandler, compositionHandler } = listeners;\n  const attributes = JSON.parse(element.dataset.previousAttributes);\n  Object.keys(attributes).forEach((key) => {\n    if (attributes[key]) {\n      element.setAttribute(key, attributes[key]);\n    } else {\n      element.removeAttribute(key);\n    }\n  });\n  element.removeAttribute('data-previous-attributes');\n  element.removeAttribute('data-ignore-composition');\n  element.removeEventListener('input', inputHandler);\n  element.removeEventListener('compositionstart', compositionHandler);\n  element.removeEventListener('compositionupdate', compositionHandler);\n  element.removeEventListener('compositionend', compositionHandler);\n  untrackListeners(listeners);\n  if (debug === true) {\n    removeDebugListeners(element);\n  }\n}\n\nexport default unbind;\n"],"names":["typeOf","value","Object","_typeof","toString","call","slice","toLowerCase","isEmpty","input","length","isCharInRange","char","start","arguments","undefined","end","code","charCodeAt","VERSION","TO_KANA_METHODS","HIRAGANA","KATAKANA","ROMANIZATIONS","HEPBURN","DEFAULT_OPTIONS","useObsoleteKana","passRomaji","upcaseKatakana","IMEMode","convertLongVowelMark","romanization","HIRAGANA_START","KATAKANA_START","KANA_PUNCTUATION","JA_PUNCTUATION_RANGES","JAPANESE_RANGES","concat","ZENKAKU_UPPERCASE","ROMAJI_RANGES","EN_PUNCTUATION_RANGES","SMART_QUOTE_RANGES","isCharJapanese","some","_ref","_ref2","_slicedToArray","isJapanese","allowed","augmented","_toConsumableArray","every","isJa","test","safeIsNaN","Number","isNaN","areInputsEqual","newInputs","lastInputs","i","first","second","memoizeOne","resultFn","isEqual","cache","memoized","newArgs","_i","lastThis","this","lastArgs","lastResult","apply","clear","has","prototype","hasOwnProperty","find","iter","tar","key","_step","keys","_iterator","s","n","done","dequal","err","e","f","foo","bar","ctor","len","tmp","constructor","Date","getTime","RegExp","Array","Set","size","_step2","_iterator2","_createForOfIteratorHelper","Map","_step3","_iterator3","get","ArrayBuffer","Uint8Array","DataView","byteLength","getInt8","isView","mergeWithDefaultOptions","opts","assign","applyMapping","string","mapping","convertEnding","root","newChunk","remaining","currentCursor","firstChar","charAt","parse","tree","lastCursor","subtree","nextChar","nextSubtree","transform","entries","reduce","map","endOfBranch","getSubTreeOf","split","correctSubTree","createCustomMapping","customMap","customTree","forEach","_ref3","_ref4","roma","kana","subTree","transformMap","mapSubtree","customSubtree","newSubtree","_ref5","_ref6","JSON","stringify","mergeCustomMapping","customMapping","BASIC_KUNREI","a","u","o","k","t","h","m","y","r","w","g","z","d","b","p","v","SPECIAL_SYMBOLS","CONSONANTS","q","SMALL_Y","ya","yi","yu","ye","yo","SMALL_VOWELS","ALIASES","sh","ch","cy","chy","shy","j","jy","shi","chi","tsu","ji","fu","SMALL_LETTERS","tu","wa","ka","ke","SPECIAL_CASES","wu","wi","we","kwa","whu","tha","thu","tho","dha","dhu","dho","AIUEO_CONSTRUCTIONS","wh","kw","qw","gw","sw","ts","th","tw","dh","dw","fw","createRomajiToKanaMap","kanaTree","subtreeOf","addTsu","tsuTree","_ref19","_ref20","consonant","yKana","symbol","jsymbol","_ref7","_ref8","aiueoKana","_ref9","_ref10","vowel","nChar","c","_ref11","_ref12","alternative","allExceptLast","last","_ref15","_ref16","kunreiRoma","chars","xRoma","xSubtree","list","_ref13","_ref14","alt","startsWith","replace","altRoma","prefix","_ref17","_ref18","freeze","romajiToKanaMap","USE_OBSOLETE_KANA_MAP","isCharUpperCase","isCharLongDash","isCharSlashDot","isCharHiragana","hiraganaToKatakana","kata","push","kataChar","String","fromCharCode","join","customKanaMapping","mapCopy","IME_MODE_MAP","toKana","config","options","splitIntoConvertedKana","kanaToken","_kanaToken","enforceHiragana","enforceKatakana","LISTENERS","makeOnInput","prevInput","mergedConfig","preConfiguredMap","triggers","toUpperCase","target","dataset","ignoreComposition","splitInput","_splitInput2","text","head","toConvert","tail","cursor","includes","_workFromStart2","workFromStart","_workBackwards2","workBackwards","_takeWhileAndSlice2","takeWhileAndSlice","_takeWhileAndSlice4","selectionEnd","textToConvert","convertedText","newCursor","newValue","setTimeout","setSelectionRange","convertInput","onComposition","type","data","window","navigator","platform","trackListeners","id","inputHandler","compositionHandler","untrackListeners","targetId","filter","findListeners","el","getAttribute","catalystChars","startIndex","_takeWhileAndSlice5","reverse","_takeWhileAndSlice6","source","predicate","x","result","events","_ref$target","selectionStart","console","log","compositionstart","compositionupdate","_ref2$target","compositionend","addDebugListeners","event","handler","addEventListener","removeDebugListeners","removeEventListener","ELEMENTS","idCounter","newId","now","isCharRomaji","isRomaji","isRoma","isCharKatakana","isCharKana","isKana","isHiragana","isKatakana","isCharIterationMark","isCharKanji","isKanji","isMixed","passKanji","hasKanji","isCharInitialLongDash","index","isCharInnerLongDash","isKanaAsSymbol","LONG_VOWELS","katakanaToHiragana","toRomaji","isDestinationRomaji","previousKana","hira","romaji","hiraChar","kanaToHepburnMap","BASIC_ROMAJI","あ","い","う","え","お","か","き","く","け","こ","さ","し","す","せ","そ","た","ち","つ","て","と","な","に","ぬ","ね","の","は","ひ","ふ","へ","ほ","ま","み","む","め","も","ら","り","る","れ","ろ","や","ゆ","よ","わ","ゐ","ゑ","を","ん","が","ぎ","ぐ","げ","ご","ざ","じ","ず","ぜ","ぞ","だ","ぢ","づ","で","ど","ば","び","ぶ","べ","ぼ","ぱ","ぴ","ぷ","ぺ","ぽ","ゔぁ","ゔぃ","ゔ","ゔぇ","ゔぉ","AMBIGUOUS_VOWELS","ゃ","ゅ","ょ","SMALL_Y_EXTRA","ぃ","ぇ","SMALL_AIUEO","ぁ","ぅ","ぉ","YOON_KANA","YOON_EXCEPTIONS","SMALL_KANA","っ","SOKUON_WHITELIST","getKanaToHepburnTree","romajiTree","setTrans","transliteration","firstRomajiChar","yRoma","resolveTsu","createKanaToRomajiMap","customRomajiMapping","getKanaToRomajiTree","splitIntoRomaji","romajiToken","_romajiToken","isCharEnglishPunctuation","isCharJapanesePunctuation","isCharEnSpace","isCharJaSpace","isCharJaNum","isCharEnNum","TOKEN_TYPES","getType","compact","EN","JA","EN_NUM","JA_NUM","EN_PUNC","JA_PUNC","KANJI","SPACE","OTHER","tokenize","_ref$compact","_ref$detailed","detailed","initial","shift","prevType","tokens","currType","sameType","pop","isLeadingWithoutInitialKana","leading","isTrailingWithoutFinalKana","isInvalidMatcher","matchKanji","element","debug","nodeName","Error","hasAttribute","onInput","attributes","name","previousAttributes","attribute","setAttribute","_ref$leading","_ref$matchKanji","okuriganaRegex","convertedKatakana","mergedOptions","hiragana","listeners","removeAttribute"],"mappings":"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"}