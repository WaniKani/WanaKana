{"version":3,"file":"wanakana.min.js","sources":["../src/utils/typeOf.js","../src/utils/isEmpty.js","../src/utils/isCharInRange.js","../src/constants.ts","../src/utils/isCharJapanese.js","../src/isJapanese.js","../node_modules/memoize-one/dist/memoize-one.esm.js","../node_modules/dequal/dist/index.mjs","../src/utils/mergeWithDefaultOptions.js","../src/utils/kanaMapping.js","../src/utils/romajiToKanaMap.js","../src/utils/isCharUpperCase.js","../src/utils/isCharLongDash.js","../src/utils/isCharSlashDot.js","../src/utils/isCharHiragana.js","../src/utils/hiraganaToKatakana.js","../src/toKana.js","../src/utils/dom.js","../src/utils/logInputEvents.js","../src/bind.js","../src/utils/isCharRomaji.js","../src/isRomaji.js","../src/utils/isCharKatakana.js","../src/utils/isCharKana.js","../src/isKana.js","../src/isHiragana.js","../src/isKatakana.js","../src/utils/isCharIterationMark.js","../src/utils/isCharKanji.js","../src/isKanji.js","../src/isMixed.js","../src/utils/katakanaToHiragana.js","../src/utils/kanaToRomajiMap.js","../src/toRomaji.js","../src/utils/isCharEnglishPunctuation.js","../src/utils/isCharJapanesePunctuation.js","../src/tokenize.js","../src/stripOkurigana.js","../src/toHiragana.js","../src/toKatakana.js","../src/unbind.js"],"sourcesContent":["/**\n * Returns detailed type as string (instead of just 'object' for arrays etc)\n * @private\n * @param {any} value js value\n * @returns {String} type of value\n * @example\n * typeOf({}); // 'object'\n * typeOf([]); // 'array'\n * typeOf(function() {}); // 'function'\n * typeOf(/a/); // 'regexp'\n * typeOf(new Date()); // 'date'\n * typeOf(null); // 'null'\n * typeOf(undefined); // 'undefined'\n * typeOf('a'); // 'string'\n * typeOf(1); // 'number'\n * typeOf(true); // 'boolean'\n * typeOf(new Map()); // 'map'\n * typeOf(new Set()); // 'map'\n */\nfunction typeOf(value) {\n  if (value === null) {\n    return 'null';\n  }\n  if (value !== Object(value)) {\n    return typeof value;\n  }\n  return {}.toString\n    .call(value)\n    .slice(8, -1)\n    .toLowerCase();\n}\n\nexport default typeOf;\n","import typeOf from './typeOf';\n/**\n * Checks if input string is empty\n * @param  {String} input text input\n * @return {Boolean} true if no input\n */\nfunction isEmpty(input) {\n  if (typeOf(input) !== 'string') {\n    return true;\n  }\n  return !input.length;\n}\n\nexport default isEmpty;\n","import isEmpty from './isEmpty';\n\n/**\n * Takes a character and a unicode range. Returns true if the char is in the range.\n * @param  {String}  char  unicode character\n * @param  {Number}  start unicode start range\n * @param  {Number}  end   unicode end range\n * @return {Boolean}\n */\nfunction isCharInRange(char = '', start, end) {\n  if (isEmpty(char)) return false;\n  const code = char.charCodeAt(0);\n  return start <= code && code <= end;\n}\n\nexport default isCharInRange;\n","export const VERSION = '5.3.1';\n\nexport const TO_KANA_METHODS: {\n  HIRAGANA: 'toHiragana',\n  KATAKANA: 'toKatakana',\n} = {\n  HIRAGANA: 'toHiragana',\n  KATAKANA: 'toKatakana',\n};\n\nexport const ROMANIZATIONS: { HEPBURN: 'hepburn' } = {\n  HEPBURN: 'hepburn',\n};\n\nexport type DefaultOptions = {\n  useObsoleteKana?: boolean,\n  passRomaji?: boolean,\n  convertLongVowelMark?: boolean,\n  upcaseKatakana?: boolean,\n  IMEMode?: boolean | 'toHiragana' | 'toKatakana',\n  romanization?: 'hepburn',\n  customKanaMapping?: { [index: string]: string }\n  customRomajiMapping?: { [index: string]: string }\n};\n\n/**\n * Default config for WanaKana, user passed options will be merged with these\n * @type {DefaultOptions}\n * @name DefaultOptions\n * @property {Boolean} [useObsoleteKana=false] - Set to true to use obsolete characters, such as ゐ and ゑ.\n * @example\n * toHiragana('we', { useObsoleteKana: true })\n * // => 'ゑ'\n * @property {Boolean} [passRomaji=false] - Set to true to pass romaji when using mixed syllabaries with toKatakana() or toHiragana()\n * @example\n * toHiragana('only convert the katakana: ヒラガナ', { passRomaji: true })\n * // => \"only convert the katakana: ひらがな\"\n * @property {Boolean} [convertLongVowelMark=true] - Set to false to prevent conversions of 'ー' to extended vowels with toHiragana()\n * @example\n * toHiragana('ラーメン', { convertLongVowelMark: false });\n * // => 'らーめん\n * @property {Boolean} [upcaseKatakana=false] - Set to true to convert katakana to uppercase using toRomaji()\n * @example\n * toRomaji('ひらがな カタカナ', { upcaseKatakana: true })\n * // => \"hiragana KATAKANA\"\n * @property {Boolean | 'toHiragana' | 'toKatakana'} [IMEMode=false] - Set to true, 'toHiragana', or 'toKatakana' to handle conversion while it is being typed.\n * @property {'hepburn'} [romanization='hepburn'] - choose toRomaji() romanization map (currently only 'hepburn')\n * @property {Object.<String, String>} [customKanaMapping] - custom map will be merged with default conversion\n * @example\n * toKana('wanakana', { customKanaMapping: { na: 'に', ka: 'Bana' }) };\n * // => 'わにBanaに'\n * @property {Object.<String, String>} [customRomajiMapping] - custom map will be merged with default conversion\n * @example\n * toRomaji('つじぎり', { customRomajiMapping: { じ: 'zi', つ: 'tu', り: 'li' }) };\n * // => 'tuzigili'\n */\nexport const DEFAULT_OPTIONS: DefaultOptions = {\n  useObsoleteKana: false,\n  passRomaji: false,\n  convertLongVowelMark: true,\n  upcaseKatakana: false,\n  IMEMode: false,\n  romanization: ROMANIZATIONS.HEPBURN,\n};\n\n// CharCode References\n// http://www.rikai.com/library/kanjitables/kanji_codes.unicode.shtml\n// http://unicode-table.com\n\nexport const LATIN_LOWERCASE_START = 0x61;\nexport const LATIN_LOWERCASE_END = 0x7a;\nexport const LATIN_UPPERCASE_START = 0x41;\nexport const LATIN_UPPERCASE_END = 0x5a;\nexport const LOWERCASE_ZENKAKU_START = 0xff41;\nexport const LOWERCASE_ZENKAKU_END = 0xff5a;\nexport const UPPERCASE_ZENKAKU_START = 0xff21;\nexport const UPPERCASE_ZENKAKU_END = 0xff3a;\nexport const HIRAGANA_START = 0x3041;\nexport const HIRAGANA_END = 0x3096;\nexport const KATAKANA_START = 0x30a1;\nexport const KATAKANA_END = 0x30fc;\nexport const KANJI_START = 0x4e00;\nexport const KANJI_END = 0x9faf;\n\nexport const KANJI_ITERATION_MARK = 0x3005; // 々\nexport const PROLONGED_SOUND_MARK = 0x30fc; // ー\nexport const KANA_SLASH_DOT = 0x30fb; // ・\n\nconst ZENKAKU_NUMBERS = [0xff10, 0xff19];\nconst ZENKAKU_UPPERCASE = [UPPERCASE_ZENKAKU_START, UPPERCASE_ZENKAKU_END];\nconst ZENKAKU_LOWERCASE = [LOWERCASE_ZENKAKU_START, LOWERCASE_ZENKAKU_END];\nconst ZENKAKU_PUNCTUATION_1 = [0xff01, 0xff0f];\nconst ZENKAKU_PUNCTUATION_2 = [0xff1a, 0xff1f];\nconst ZENKAKU_PUNCTUATION_3 = [0xff3b, 0xff3f];\nconst ZENKAKU_PUNCTUATION_4 = [0xff5b, 0xff60];\nconst ZENKAKU_SYMBOLS_CURRENCY = [0xffe0, 0xffee];\n\nconst HIRAGANA_CHARS = [0x3040, 0x309f];\nconst KATAKANA_CHARS = [0x30a0, 0x30ff];\nconst HANKAKU_KATAKANA = [0xff66, 0xff9f];\nconst KATAKANA_PUNCTUATION = [0x30fb, 0x30fc];\nconst KANA_PUNCTUATION = [0xff61, 0xff65];\nconst CJK_SYMBOLS_PUNCTUATION = [0x3000, 0x303f];\nconst COMMON_CJK = [0x4e00, 0x9fff];\nconst RARE_CJK = [0x3400, 0x4dbf];\n\nexport const KANA_RANGES = [\n  HIRAGANA_CHARS,\n  KATAKANA_CHARS,\n  KANA_PUNCTUATION,\n  HANKAKU_KATAKANA,\n];\n\nexport const JA_PUNCTUATION_RANGES = [\n  CJK_SYMBOLS_PUNCTUATION,\n  KANA_PUNCTUATION,\n  KATAKANA_PUNCTUATION,\n  ZENKAKU_PUNCTUATION_1,\n  ZENKAKU_PUNCTUATION_2,\n  ZENKAKU_PUNCTUATION_3,\n  ZENKAKU_PUNCTUATION_4,\n  ZENKAKU_SYMBOLS_CURRENCY,\n];\n\n// All Japanese unicode start and end ranges\n// Includes kanji, kana, zenkaku latin chars, punctuation, and number ranges.\nexport const JAPANESE_RANGES = [\n  ...KANA_RANGES,\n  ...JA_PUNCTUATION_RANGES,\n  ZENKAKU_UPPERCASE,\n  ZENKAKU_LOWERCASE,\n  ZENKAKU_NUMBERS,\n  COMMON_CJK,\n  RARE_CJK,\n];\n\nconst MODERN_ENGLISH = [0x0000, 0x007f];\nconst HEPBURN_MACRON_RANGES = [\n  [0x0100, 0x0101], // Ā ā\n  [0x0112, 0x0113], // Ē ē\n  [0x012a, 0x012b], // Ī ī\n  [0x014c, 0x014d], // Ō ō\n  [0x016a, 0x016b], // Ū ū\n];\nconst SMART_QUOTE_RANGES = [\n  [0x2018, 0x2019], // ‘ ’\n  [0x201c, 0x201d], // “ ”\n];\n\nexport const ROMAJI_RANGES = [MODERN_ENGLISH, ...HEPBURN_MACRON_RANGES];\n\nexport const EN_PUNCTUATION_RANGES = [\n  [0x20, 0x2f],\n  [0x3a, 0x3f],\n  [0x5b, 0x60],\n  [0x7b, 0x7e],\n  ...SMART_QUOTE_RANGES,\n];\n","import isCharInRange from './isCharInRange';\nimport { JAPANESE_RANGES } from '../constants.ts';\n\n/**\n * Tests a character. Returns true if the character is [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharJapanese(char = '') {\n  return JAPANESE_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\nexport default isCharJapanese;\n","import typeOf from './utils/typeOf';\nimport isEmpty from './utils/isEmpty';\nimport isCharJapanese from './utils/isCharJapanese';\n\n/**\n * Test if `input` only includes [Kanji](https://en.wikipedia.org/wiki/Kanji), [Kana](https://en.wikipedia.org/wiki/Kana), zenkaku numbers, and JA punctuation/symbols.”\n * @param  {String} [input=''] text\n * @param  {RegExp} [allowed] additional test allowed to pass for each char\n * @return {Boolean} true if passes checks\n * @example\n * isJapanese('泣き虫')\n * // => true\n * isJapanese('あア')\n * // => true\n * isJapanese('２月') // Zenkaku numbers allowed\n * // => true\n * isJapanese('泣き虫。！〜＄') // Zenkaku/JA punctuation\n * // => true\n * isJapanese('泣き虫.!~$') // Latin punctuation fails\n * // => false\n * isJapanese('A泣き虫')\n * // => false\n * isJapanese('≪偽括弧≫', /[≪≫]/);\n * // => true\n */\nfunction isJapanese(input = '', allowed) {\n  const augmented = typeOf(allowed) === 'regexp';\n  return isEmpty(input)\n    ? false\n    : [...input].every((char) => {\n      const isJa = isCharJapanese(char);\n      return !augmented ? isJa : isJa || allowed.test(char);\n    });\n}\n\nexport default isJapanese;\n","var safeIsNaN = Number.isNaN ||\n    function ponyfill(value) {\n        return typeof value === 'number' && value !== value;\n    };\nfunction isEqual(first, second) {\n    if (first === second) {\n        return true;\n    }\n    if (safeIsNaN(first) && safeIsNaN(second)) {\n        return true;\n    }\n    return false;\n}\nfunction areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n        return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n        if (!isEqual(newInputs[i], lastInputs[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) { isEqual = areInputsEqual; }\n    var cache = null;\n    function memoized() {\n        var newArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            newArgs[_i] = arguments[_i];\n        }\n        if (cache && cache.lastThis === this && isEqual(newArgs, cache.lastArgs)) {\n            return cache.lastResult;\n        }\n        var lastResult = resultFn.apply(this, newArgs);\n        cache = {\n            lastResult: lastResult,\n            lastArgs: newArgs,\n            lastThis: this,\n        };\n        return lastResult;\n    }\n    memoized.clear = function clear() {\n        cache = null;\n    };\n    return memoized;\n}\n\nexport { memoizeOne as default };\n","var has = Object.prototype.hasOwnProperty;\n\nfunction find(iter, tar, key) {\n\tfor (key of iter.keys()) {\n\t\tif (dequal(key, tar)) return key;\n\t}\n}\n\nexport function dequal(foo, bar) {\n\tvar ctor, len, tmp;\n\tif (foo === bar) return true;\n\n\tif (foo && bar && (ctor=foo.constructor) === bar.constructor) {\n\t\tif (ctor === Date) return foo.getTime() === bar.getTime();\n\t\tif (ctor === RegExp) return foo.toString() === bar.toString();\n\n\t\tif (ctor === Array) {\n\t\t\tif ((len=foo.length) === bar.length) {\n\t\t\t\twhile (len-- && dequal(foo[len], bar[len]));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ctor === Set) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len;\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!bar.has(tmp)) return false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === Map) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len[0];\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!dequal(len[1], bar.get(tmp))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === ArrayBuffer) {\n\t\t\tfoo = new Uint8Array(foo);\n\t\t\tbar = new Uint8Array(bar);\n\t\t} else if (ctor === DataView) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo.getInt8(len) === bar.getInt8(len));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ArrayBuffer.isView(foo)) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo[len] === bar[len]);\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (!ctor || typeof foo === 'object') {\n\t\t\tlen = 0;\n\t\t\tfor (ctor in foo) {\n\t\t\t\tif (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n\t\t\t\tif (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;\n\t\t\t}\n\t\t\treturn Object.keys(bar).length === len;\n\t\t}\n\t}\n\n\treturn foo !== foo && bar !== bar;\n}\n","import { DEFAULT_OPTIONS } from '../constants.ts';\n/**\n * Easy re-use of merging with default options\n * @param {Object} opts user options\n * @returns user options merged over default options\n */\nconst mergeWithDefaultOptions = (opts = {}) => Object.assign({}, DEFAULT_OPTIONS, opts);\n\nexport default mergeWithDefaultOptions;\n","import typeOf from './typeOf';\n\nexport function applyMapping(string, mapping, convertEnding) {\n  const root = mapping;\n\n  function nextSubtree(tree, nextChar) {\n    const subtree = tree[nextChar];\n    if (subtree === undefined) {\n      return undefined;\n    }\n    // if the next child node does not have a node value, set its node value to the input\n    return Object.assign({ '': tree[''] + nextChar }, tree[nextChar]);\n  }\n\n  function newChunk(remaining, currentCursor) {\n    // start parsing a new chunk\n    const firstChar = remaining.charAt(0);\n\n    return parse(\n      Object.assign({ '': firstChar }, root[firstChar]),\n      remaining.slice(1),\n      currentCursor,\n      currentCursor + 1\n    );\n  }\n\n  function parse(tree, remaining, lastCursor, currentCursor) {\n    if (!remaining) {\n      if (convertEnding || Object.keys(tree).length === 1) {\n        // nothing more to consume, just commit the last chunk and return it\n        // so as to not have an empty element at the end of the result\n        return tree[''] ? [[lastCursor, currentCursor, tree['']]] : [];\n      }\n      // if we don't want to convert the ending, because there are still possible continuations\n      // return null as the final node value\n      return [[lastCursor, currentCursor, null]];\n    }\n\n    if (Object.keys(tree).length === 1) {\n      return [[lastCursor, currentCursor, tree['']]].concat(\n        newChunk(remaining, currentCursor)\n      );\n    }\n\n    const subtree = nextSubtree(tree, remaining.charAt(0));\n\n    if (subtree === undefined) {\n      return [[lastCursor, currentCursor, tree['']]].concat(\n        newChunk(remaining, currentCursor)\n      );\n    }\n    // continue current branch\n    return parse(subtree, remaining.slice(1), lastCursor, currentCursor + 1);\n  }\n\n  return newChunk(string, 0);\n}\n\n// transform the tree, so that for example hepburnTree['ゔ']['ぁ'][''] === 'va'\n// or kanaTree['k']['y']['a'][''] === 'きゃ'\nexport function transform(tree) {\n  return Object.entries(tree).reduce((map, [char, subtree]) => {\n    const endOfBranch = typeOf(subtree) === 'string';\n    // eslint-disable-next-line no-param-reassign\n    map[char] = endOfBranch ? { '': subtree } : transform(subtree);\n    return map;\n  }, {});\n}\n\nexport function getSubTreeOf(tree, string) {\n  return string.split('').reduce((correctSubTree, char) => {\n    if (correctSubTree[char] === undefined) {\n      // eslint-disable-next-line no-param-reassign\n      correctSubTree[char] = {};\n    }\n    return correctSubTree[char];\n  }, tree);\n}\n\n/**\n * Creates a custom mapping tree, returns a function that accepts a defaultMap which the newly created customMapping will be merged with and returned\n * (customMap) => (defaultMap) => mergedMap\n * @param  {Object} customMap { 'ka' : 'な' }\n * @return {Function} (defaultMap) => defaultMergedWithCustomMap\n * @example\n * const sillyMap = createCustomMapping({ 'ちゃ': 'time', '茎': 'cookie'　});\n * // sillyMap is passed defaultMapping to merge with when called in toRomaji()\n * toRomaji(\"It's 茎 ちゃ よ\", { customRomajiMapping: sillyMap });\n * // => 'It's cookie time yo';\n */\nexport function createCustomMapping(customMap = {}) {\n  const customTree = {};\n\n  if (typeOf(customMap) === 'object') {\n    Object.entries(customMap).forEach(([roma, kana]) => {\n      let subTree = customTree;\n      roma.split('').forEach((char) => {\n        if (subTree[char] === undefined) {\n          subTree[char] = {};\n        }\n        subTree = subTree[char];\n      });\n      subTree[''] = kana;\n    });\n  }\n\n  return function makeMap(map) {\n    const mapCopy = JSON.parse(JSON.stringify(map));\n\n    function transformMap(mapSubtree, customSubtree) {\n      if (mapSubtree === undefined || typeOf(mapSubtree) === 'string') {\n        return customSubtree;\n      }\n      return Object.entries(customSubtree).reduce(\n        (newSubtree, [char, subtree]) => {\n          // eslint-disable-next-line no-param-reassign\n          newSubtree[char] = transformMap(mapSubtree[char], subtree);\n          return newSubtree;\n        },\n        mapSubtree\n      );\n    }\n\n    return transformMap(mapCopy, customTree);\n  };\n}\n\n// allow consumer to pass either function or object as customMapping\nexport function mergeCustomMapping(map, customMapping) {\n  if (!customMapping) {\n    return map;\n  }\n  return typeOf(customMapping) === 'function'\n    ? customMapping(map)\n    : createCustomMapping(customMapping)(map);\n}\n","import { transform, getSubTreeOf, createCustomMapping } from './kanaMapping';\n\n// NOTE: not exactly kunrei shiki, for example ぢゃ -> dya instead of zya, to avoid name clashing\n/* eslint-disable */\n// prettier-ignore\nconst BASIC_KUNREI = {\n  a: 'あ', i: 'い', u: 'う', e: 'え', o: 'お',\n  k: { a: 'か', i: 'き', u: 'く', e: 'け', o: 'こ', },\n  s: { a: 'さ', i: 'し', u: 'す', e: 'せ', o: 'そ', },\n  t: { a: 'た', i: 'ち', u: 'つ', e: 'て', o: 'と', },\n  n: { a: 'な', i: 'に', u: 'ぬ', e: 'ね', o: 'の', },\n  h: { a: 'は', i: 'ひ', u: 'ふ', e: 'へ', o: 'ほ', },\n  m: { a: 'ま', i: 'み', u: 'む', e: 'め', o: 'も', },\n  y: { a: 'や', u: 'ゆ', o: 'よ' },\n  r: { a: 'ら', i: 'り', u: 'る', e: 'れ', o: 'ろ', },\n  w: { a: 'わ', i: 'ゐ', e: 'ゑ', o: 'を', },\n  g: { a: 'が', i: 'ぎ', u: 'ぐ', e: 'げ', o: 'ご', },\n  z: { a: 'ざ', i: 'じ', u: 'ず', e: 'ぜ', o: 'ぞ', },\n  d: { a: 'だ', i: 'ぢ', u: 'づ', e: 'で', o: 'ど', },\n  b: { a: 'ば', i: 'び', u: 'ぶ', e: 'べ', o: 'ぼ', },\n  p: { a: 'ぱ', i: 'ぴ', u: 'ぷ', e: 'ぺ', o: 'ぽ', },\n  v: { a: 'ゔぁ', i: 'ゔぃ', u: 'ゔ', e: 'ゔぇ', o: 'ゔぉ', },\n};\n\nconst SPECIAL_SYMBOLS = {\n  '.': '。',\n  ',': '、',\n  ':': '：',\n  '/': '・',\n  '!': '！',\n  '?': '？',\n  '~': '〜',\n  '-': 'ー',\n  '‘': '「',\n  '’': '」',\n  '“': '『',\n  '”': '』',\n  '[': '［',\n  ']': '］',\n  '(': '（',\n  ')': '）',\n  '{': '｛',\n  '}': '｝',\n};\n\nconst CONSONANTS = {\n  k: 'き',\n  s: 'し',\n  t: 'ち',\n  n: 'に',\n  h: 'ひ',\n  m: 'み',\n  r: 'り',\n  g: 'ぎ',\n  z: 'じ',\n  d: 'ぢ',\n  b: 'び',\n  p: 'ぴ',\n  v: 'ゔ',\n  q: 'く',\n  f: 'ふ',\n};\nconst SMALL_Y = { ya: 'ゃ', yi: 'ぃ', yu: 'ゅ', ye: 'ぇ', yo: 'ょ' };\nconst SMALL_VOWELS = { a: 'ぁ', i: 'ぃ', u: 'ぅ', e: 'ぇ', o: 'ぉ' };\n\n// typing one should be the same as having typed the other instead\nconst ALIASES = {\n  sh: 'sy', // sha -> sya\n  ch: 'ty', // cho -> tyo\n  cy: 'ty', // cyo -> tyo\n  chy: 'ty', // chyu -> tyu\n  shy: 'sy', // shya -> sya\n  j: 'zy', // ja -> zya\n  jy: 'zy', // jye -> zye\n\n  // exceptions to above rules\n  shi: 'si',\n  chi: 'ti',\n  tsu: 'tu',\n  ji: 'zi',\n  fu: 'hu',\n};\n\n// xtu -> っ\nconst SMALL_LETTERS = Object.assign(\n  {\n    tu: 'っ',\n    wa: 'ゎ',\n    ka: 'ヵ',\n    ke: 'ヶ',\n  },\n  SMALL_VOWELS,\n  SMALL_Y\n);\n\n// don't follow any notable patterns\nconst SPECIAL_CASES = {\n  yi: 'い',\n  wu: 'う',\n  ye: 'いぇ',\n  wi: 'うぃ',\n  we: 'うぇ',\n  kwa: 'くぁ',\n  whu: 'う',\n  // because it's not thya for てゃ but tha\n  // and tha is not てぁ, but てゃ\n  tha: 'てゃ',\n  thu: 'てゅ',\n  tho: 'てょ',\n  dha: 'でゃ',\n  dhu: 'でゅ',\n  dho: 'でょ',\n};\n\nconst AIUEO_CONSTRUCTIONS = {\n  wh: 'う',\n  kw: 'く',\n  qw: 'く',\n  q: 'く',\n  gw: 'ぐ',\n  sw: 'す',\n  ts: 'つ',\n  th: 'て',\n  tw: 'と',\n  dh: 'で',\n  dw: 'ど',\n  fw: 'ふ',\n  f: 'ふ',\n};\n\n/* eslint-enable */\nfunction createRomajiToKanaMap() {\n  const kanaTree = transform(BASIC_KUNREI);\n  // pseudo partial application\n  const subtreeOf = (string) => getSubTreeOf(kanaTree, string);\n\n  // add tya, sya, etc.\n  Object.entries(CONSONANTS).forEach(([consonant, yKana]) => {\n    Object.entries(SMALL_Y).forEach(([roma, kana]) => {\n      // for example kyo -> き + ょ\n      subtreeOf(consonant + roma)[''] = yKana + kana;\n    });\n  });\n\n  Object.entries(SPECIAL_SYMBOLS).forEach(([symbol, jsymbol]) => {\n    subtreeOf(symbol)[''] = jsymbol;\n  });\n\n  // things like うぃ, くぃ, etc.\n  Object.entries(AIUEO_CONSTRUCTIONS).forEach(([consonant, aiueoKana]) => {\n    Object.entries(SMALL_VOWELS).forEach(([vowel, kana]) => {\n      const subtree = subtreeOf(consonant + vowel);\n      subtree[''] = aiueoKana + kana;\n    });\n  });\n\n  // different ways to write ん\n  ['n', \"n'\", 'xn'].forEach((nChar) => {\n    subtreeOf(nChar)[''] = 'ん';\n  });\n\n  // c is equivalent to k, but not for chi, cha, etc. that's why we have to make a copy of k\n  kanaTree.c = JSON.parse(JSON.stringify(kanaTree.k));\n\n  Object.entries(ALIASES).forEach(([string, alternative]) => {\n    const allExceptLast = string.slice(0, string.length - 1);\n    const last = string.charAt(string.length - 1);\n    const parentTree = subtreeOf(allExceptLast);\n    // copy to avoid recursive containment\n    parentTree[last] = JSON.parse(JSON.stringify(subtreeOf(alternative)));\n  });\n\n  function getAlternatives(string) {\n    return [...Object.entries(ALIASES), ...[['c', 'k']]].reduce(\n      (list, [alt, roma]) => (string.startsWith(roma) ? list.concat(string.replace(roma, alt)) : list),\n      []\n    );\n  }\n\n  Object.entries(SMALL_LETTERS).forEach(([kunreiRoma, kana]) => {\n    const last = (char) => char.charAt(char.length - 1);\n    const allExceptLast = (chars) => chars.slice(0, chars.length - 1);\n    const xRoma = `x${kunreiRoma}`;\n    const xSubtree = subtreeOf(xRoma);\n    xSubtree[''] = kana;\n\n    // ltu -> xtu -> っ\n    const parentTree = subtreeOf(`l${allExceptLast(kunreiRoma)}`);\n    parentTree[last(kunreiRoma)] = xSubtree;\n\n    // ltsu -> ltu -> っ\n    getAlternatives(kunreiRoma).forEach((altRoma) => {\n      ['l', 'x'].forEach((prefix) => {\n        const altParentTree = subtreeOf(prefix + allExceptLast(altRoma));\n        altParentTree[last(altRoma)] = subtreeOf(prefix + kunreiRoma);\n      });\n    });\n  });\n\n  Object.entries(SPECIAL_CASES).forEach(([string, kana]) => {\n    subtreeOf(string)[''] = kana;\n  });\n\n  // add kka, tta, etc.\n  function addTsu(tree) {\n    return Object.entries(tree).reduce((tsuTree, [key, value]) => {\n      if (!key) {\n        // we have reached the bottom of this branch\n        // eslint-disable-next-line no-param-reassign\n        tsuTree[key] = `っ${value}`;\n      } else {\n        // more subtrees\n        // eslint-disable-next-line no-param-reassign\n        tsuTree[key] = addTsu(value);\n      }\n      return tsuTree;\n    }, {});\n  }\n  // have to explicitly name c here, because we made it a copy of k, not a reference\n  [...Object.keys(CONSONANTS), 'c', 'y', 'w', 'j'].forEach((consonant) => {\n    const subtree = kanaTree[consonant];\n    subtree[consonant] = addTsu(subtree);\n  });\n  // nn should not be っん\n  delete kanaTree.n.n;\n  // solidify the results, so that there there is referential transparency within the tree\n  return Object.freeze(JSON.parse(JSON.stringify(kanaTree)));\n}\n\nlet romajiToKanaMap = null;\n\nexport function getRomajiToKanaTree() {\n  if (romajiToKanaMap == null) {\n    romajiToKanaMap = createRomajiToKanaMap();\n  }\n  return romajiToKanaMap;\n}\n\nexport const USE_OBSOLETE_KANA_MAP = createCustomMapping({\n  wi: 'ゐ',\n  we: 'ゑ',\n});\n\nexport function IME_MODE_MAP(map) {\n  // in IME mode, we do not want to convert single ns\n  const mapCopy = JSON.parse(JSON.stringify(map));\n  mapCopy.n.n = { '': 'ん' };\n  mapCopy.n[' '] = { '': 'ん' };\n  return mapCopy;\n}\n","import isEmpty from './isEmpty';\nimport isCharInRange from './isCharInRange';\nimport { LATIN_UPPERCASE_START, LATIN_UPPERCASE_END } from '../constants.ts';\n\n/**\n * Tests if char is in English unicode uppercase range\n * @param  {String} char\n * @return {Boolean}\n */\nfunction isCharUpperCase(char = '') {\n  if (isEmpty(char)) return false;\n  return isCharInRange(char, LATIN_UPPERCASE_START, LATIN_UPPERCASE_END);\n}\n\nexport default isCharUpperCase;\n","import isEmpty from './isEmpty';\nimport { PROLONGED_SOUND_MARK } from '../constants.ts';\n\n/**\n * Returns true if char is 'ー'\n * @param  {String} char to test\n * @return {Boolean}\n */\nfunction isCharLongDash(char = '') {\n  if (isEmpty(char)) return false;\n  return char.charCodeAt(0) === PROLONGED_SOUND_MARK;\n}\n\nexport default isCharLongDash;\n","import isEmpty from './isEmpty';\nimport { KANA_SLASH_DOT } from '../constants.ts';\n\n/**\n * Tests if char is '・'\n * @param  {String} char\n * @return {Boolean} true if '・'\n */\nfunction isCharSlashDot(char = '') {\n  if (isEmpty(char)) return false;\n  return char.charCodeAt(0) === KANA_SLASH_DOT;\n}\n\nexport default isCharSlashDot;\n","import isEmpty from './isEmpty';\nimport isCharLongDash from './isCharLongDash';\nimport isCharInRange from './isCharInRange';\nimport {\n  HIRAGANA_START,\n  HIRAGANA_END,\n} from '../constants.ts';\n\n/**\n * Tests a character. Returns true if the character is [Hiragana](https://en.wikipedia.org/wiki/Hiragana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharHiragana(char = '') {\n  if (isEmpty(char)) return false;\n  if (isCharLongDash(char)) return true;\n  return isCharInRange(char, HIRAGANA_START, HIRAGANA_END);\n}\n\nexport default isCharHiragana;\n","import { KATAKANA_START, HIRAGANA_START } from '../constants.ts';\n\nimport isCharLongDash from './isCharLongDash';\nimport isCharSlashDot from './isCharSlashDot';\nimport isCharHiragana from './isCharHiragana';\n\n/**\n * Convert [Hiragana](https://en.wikipedia.org/wiki/Hiragana) to [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * Passes through any non-hiragana chars\n * @private\n * @param  {String} [input=''] text input\n * @return {String} converted text\n * @example\n * hiraganaToKatakana('ひらがな')\n * // => \"ヒラガナ\"\n * hiraganaToKatakana('ひらがな is a type of kana')\n * // => \"ヒラガナ is a type of kana\"\n */\nfunction hiraganaToKatakana(input = '') {\n  const kata = [];\n  input.split('').forEach((char) => {\n    // Short circuit to avoid incorrect codeshift for 'ー' and '・'\n    if (isCharLongDash(char) || isCharSlashDot(char)) {\n      kata.push(char);\n    } else if (isCharHiragana(char)) {\n      // Shift charcode.\n      const code = char.charCodeAt(0) + (KATAKANA_START - HIRAGANA_START);\n      const kataChar = String.fromCharCode(code);\n      kata.push(kataChar);\n    } else {\n      // Pass non-hiragana chars through\n      kata.push(char);\n    }\n  });\n  return kata.join('');\n}\n\nexport default hiraganaToKatakana;\n","import memoizeOne from 'memoize-one';\nimport { dequal } from 'dequal';\n\nimport { TO_KANA_METHODS } from './constants';\nimport mergeWithDefaultOptions from './utils/mergeWithDefaultOptions';\nimport {\n  getRomajiToKanaTree,\n  IME_MODE_MAP,\n  USE_OBSOLETE_KANA_MAP,\n} from './utils/romajiToKanaMap';\nimport { applyMapping, mergeCustomMapping } from './utils/kanaMapping';\nimport isCharUpperCase from './utils/isCharUpperCase';\nimport hiraganaToKatakana from './utils/hiraganaToKatakana';\n\n// memoize and deeply compare args so we only recreate when necessary\nexport const createRomajiToKanaMap = memoizeOne(\n  (IMEMode, useObsoleteKana, customKanaMapping) => {\n    let map = getRomajiToKanaTree();\n\n    map = IMEMode ? IME_MODE_MAP(map) : map;\n    map = useObsoleteKana ? USE_OBSOLETE_KANA_MAP(map) : map;\n\n    if (customKanaMapping) {\n      map = mergeCustomMapping(map, customKanaMapping);\n    }\n\n    return map;\n  },\n  dequal\n);\n\n/**\n * Convert [Romaji](https://en.wikipedia.org/wiki/Romaji) to [Kana](https://en.wikipedia.org/wiki/Kana), lowercase text will result in [Hiragana](https://en.wikipedia.org/wiki/Hiragana) and uppercase text will result in [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} [input=''] text\n * @param  {DefaultOptions} [options=defaultOptions]\n * @param  {Object.<string, string>} [map] custom mapping\n * @return {String} converted text\n * @example\n * toKana('onaji BUTTSUUJI')\n * // => 'おなじ ブッツウジ'\n * toKana('ONAJI buttsuuji')\n * // => 'オナジ ぶっつうじ'\n * toKana('座禅‘zazen’スタイル')\n * // => '座禅「ざぜん」スタイル'\n * toKana('batsuge-mu')\n * // => 'ばつげーむ'\n * toKana('!?.:/,~-‘’“”[](){}') // Punctuation conversion\n * // => '！？。：・、〜ー「」『』［］（）｛｝'\n * toKana('we', { useObsoleteKana: true })\n * // => 'ゑ'\n * toKana('wanakana', { customKanaMapping: { na: 'に', ka: 'bana' } });\n * // => 'わにbanaに'\n */\nexport function toKana(input = '', options = {}, map) {\n  let config;\n  if (!map) {\n    config = mergeWithDefaultOptions(options);\n    map = createRomajiToKanaMap(\n      config.IMEMode,\n      config.useObsoleteKana,\n      config.customKanaMapping\n    );\n  } else {\n    config = options;\n  }\n\n  // throw away the substring index information and just concatenate all the kana\n  return splitIntoConvertedKana(input, config, map)\n    .map((kanaToken) => {\n      const [start, end, kana] = kanaToken;\n      if (kana === null) {\n        // haven't converted the end of the string, since we are in IME mode\n        return input.slice(start);\n      }\n      const enforceHiragana = config.IMEMode === TO_KANA_METHODS.HIRAGANA;\n      const enforceKatakana = config.IMEMode === TO_KANA_METHODS.KATAKANA\n        || [...input.slice(start, end)].every(isCharUpperCase);\n\n      return enforceHiragana || !enforceKatakana\n        ? kana\n        : hiraganaToKatakana(kana);\n    })\n    .join('');\n}\n\n/**\n *\n * @private\n * @param {String} [input=''] input text\n * @param {DefaultOptions} [options=defaultOptions] toKana options\n * @param {Object} [map] custom mapping\n * @returns {Array[]} [[start, end, token]]\n * @example\n * splitIntoConvertedKana('buttsuuji')\n * // => [[0, 2, 'ぶ'], [2, 6, 'っつ'], [6, 7, 'う'], [7, 9, 'じ']]\n */\nexport function splitIntoConvertedKana(input = '', options = {}, map) {\n  const { IMEMode, useObsoleteKana, customKanaMapping } = options;\n\n  if (!map) {\n    map = createRomajiToKanaMap(IMEMode, useObsoleteKana, customKanaMapping);\n  }\n\n  return applyMapping(input.toLowerCase(), map, !IMEMode);\n}\n\nexport default toKana;\n","import isJapanese from '../isJapanese';\nimport toKana, { createRomajiToKanaMap } from '../toKana';\nimport mergeWithDefaultOptions from './mergeWithDefaultOptions';\n\nlet LISTENERS = [];\n/**\n * Automagically replaces input values with converted text to kana\n * @param  {defaultOptions} [options] user config overrides, default conversion is toKana()\n * @return {Function} event handler with bound options\n * @private\n */\nexport function makeOnInput(options) {\n  let prevInput;\n\n  // Enforce IMEMode if not already specified\n  const mergedConfig = Object.assign({}, mergeWithDefaultOptions(options), {\n    IMEMode: options.IMEMode || true,\n  });\n\n  const preConfiguredMap = createRomajiToKanaMap(\n    mergedConfig.IMEMode,\n    mergedConfig.useObsoleteKana,\n    mergedConfig.customKanaMapping\n  );\n\n  const triggers = [\n    ...Object.keys(preConfiguredMap),\n    ...Object.keys(preConfiguredMap).map((char) => char.toUpperCase()),\n  ];\n\n  return function onInput({ target }) {\n    if (\n      target.value !== prevInput\n      && target.dataset.ignoreComposition !== 'true'\n    ) {\n      convertInput(target, mergedConfig, preConfiguredMap, triggers, prevInput);\n    }\n  };\n}\n\nexport function convertInput(target, options, map, triggers, prevInput) {\n  const [head, textToConvert, tail] = splitInput(\n    target.value,\n    target.selectionEnd,\n    triggers\n  );\n  const convertedText = toKana(textToConvert, options, map);\n  const changed = textToConvert !== convertedText;\n\n  if (changed) {\n    const newCursor = head.length + convertedText.length;\n    const newValue = head + convertedText + tail;\n    // eslint-disable-next-line no-param-reassign\n    target.value = newValue;\n    // eslint-disable-next-line no-param-reassign\n    prevInput = newValue;\n\n    if (tail.length) {\n      // push later on event loop (otherwise mid-text insertion can be 1 char too far to the right)\n      setTimeout(() => target.setSelectionRange(newCursor, newCursor), 1);\n    } else {\n      target.setSelectionRange(newCursor, newCursor);\n    }\n  } else {\n    // eslint-disable-next-line no-param-reassign\n    prevInput = target.value;\n  }\n}\n\nexport function onComposition({ type, target, data }) {\n  // navigator.platform is not 100% reliable for singling out all OS,\n  // but for determining desktop \"Mac OS\" it is effective enough.\n  const isMacOS = /Mac/.test(window.navigator && window.navigator.platform);\n  // We don't want to ignore on Android:\n  // https://github.com/WaniKani/WanaKana/issues/82\n  // But MacOS IME auto-closes if we don't ignore:\n  // https://github.com/WaniKani/WanaKana/issues/71\n  // Other platform Japanese IMEs pass through happily\n  if (isMacOS) {\n    if (type === 'compositionupdate' && isJapanese(data)) {\n      // eslint-disable-next-line no-param-reassign\n      target.dataset.ignoreComposition = 'true';\n    }\n\n    if (type === 'compositionend') {\n      // eslint-disable-next-line no-param-reassign\n      target.dataset.ignoreComposition = 'false';\n    }\n  }\n}\n\nexport function trackListeners(id, inputHandler, compositionHandler) {\n  LISTENERS = LISTENERS.concat({\n    id,\n    inputHandler,\n    compositionHandler,\n  });\n}\n\nexport function untrackListeners({ id: targetId }) {\n  LISTENERS = LISTENERS.filter(({ id }) => id !== targetId);\n}\n\nexport function findListeners(el) {\n  return (\n    el && LISTENERS.find(({ id }) => id === el.getAttribute('data-wanakana-id'))\n  );\n}\n\n// Handle non-terminal inserted input conversion:\n// | -> わ| -> わび| -> わ|び -> わs|び -> わsh|び -> わshi|び -> わし|び\n// or multiple ambiguous positioning (to select which \"s\" to work from)\n// こsこs|こsこ -> こsこso|こsこ -> こsこそ|こsこ\nexport function splitInput(text = '', cursor = 0, triggers = []) {\n  let head;\n  let toConvert;\n  let tail;\n\n  if (cursor === 0 && triggers.includes(text[0])) {\n    [head, toConvert, tail] = workFromStart(text, triggers);\n  } else if (cursor > 0) {\n    [head, toConvert, tail] = workBackwards(text, cursor);\n  } else {\n    [head, toConvert] = takeWhileAndSlice(\n      text,\n      (char) => !triggers.includes(char)\n    );\n    [toConvert, tail] = takeWhileAndSlice(\n      toConvert,\n      (char) => !isJapanese(char)\n    );\n  }\n\n  return [head, toConvert, tail];\n}\n\nfunction workFromStart(text, catalystChars) {\n  return [\n    '',\n    ...takeWhileAndSlice(\n      text,\n      (char) => catalystChars.includes(char) || !isJapanese(char, /[0-9]/)\n    ),\n  ];\n}\n\nfunction workBackwards(text = '', startIndex = 0) {\n  const [toConvert, head] = takeWhileAndSlice(\n    [...text.slice(0, startIndex)].reverse(),\n    (char) => !isJapanese(char)\n  );\n  return [\n    head.reverse().join(''),\n    toConvert\n      .split('')\n      .reverse()\n      .join(''),\n    text.slice(startIndex),\n  ];\n}\n\nfunction takeWhileAndSlice(source = {}, predicate = (x) => !!x) {\n  const result = [];\n  const { length } = source;\n  let i = 0;\n  while (i < length && predicate(source[i], i)) {\n    result.push(source[i]);\n    i += 1;\n  }\n  return [result.join(''), source.slice(i)];\n}\n","/* eslint-disable no-console */\nconst onInput = ({ target: { value, selectionStart, selectionEnd } }) => console.log('input:', { value, selectionStart, selectionEnd });\nconst onCompositionStart = () => console.log('compositionstart');\nconst onCompositionUpdate = ({\n  target: { value, selectionStart, selectionEnd },\n  data,\n}) => console.log('compositionupdate', {\n  data,\n  value,\n  selectionStart,\n  selectionEnd,\n});\nconst onCompositionEnd = () => console.log('compositionend');\n\nconst events = {\n  input: onInput,\n  compositionstart: onCompositionStart,\n  compositionupdate: onCompositionUpdate,\n  compositionend: onCompositionEnd,\n};\n\nexport const addDebugListeners = (input) => {\n  Object.entries(events).forEach(([event, handler]) => input.addEventListener(event, handler)\n  );\n};\n\nexport const removeDebugListeners = (input) => {\n  Object.entries(events).forEach(([event, handler]) => input.removeEventListener(event, handler)\n  );\n};\n","import { makeOnInput, onComposition, trackListeners } from './utils/dom';\nimport { addDebugListeners } from './utils/logInputEvents';\n\nconst ELEMENTS = ['TEXTAREA', 'INPUT'];\n\nlet idCounter = 0;\nconst newId = () => {\n  idCounter += 1;\n  return `${Date.now()}${idCounter}`;\n};\n\n/**\n * Binds eventListener for 'input' events to an input field to automagically replace values with kana\n * Can pass `{ IMEMode: 'toHiragana' || 'toKatakana' }` to enforce kana conversion type\n * @param  {HTMLInputElement | HTMLTextAreaElement} element textarea, input[type=\"text\"] etc\n * @param  {DefaultOptions} [options=defaultOptions] defaults to { IMEMode: true } using `toKana`\n * @example\n * bind(document.querySelector('#myInput'));\n */\nfunction bind(element = {}, options = {}, debug = false) {\n  if (!ELEMENTS.includes(element.nodeName)) {\n    throw new Error(\n      `Element provided to Wanakana bind() was not a valid input or textarea element.\\n Received: (${JSON.stringify(\n        element\n      )})`\n    );\n  }\n  if (element.hasAttribute('data-wanakana-id')) {\n    return;\n  }\n  const onInput = makeOnInput(options);\n  const id = newId();\n  const attributes = [\n    { name: 'data-wanakana-id', value: id },\n    { name: 'lang', value: 'ja' },\n    { name: 'autoCapitalize', value: 'none' },\n    { name: 'autoCorrect', value: 'off' },\n    { name: 'autoComplete', value: 'off' },\n    { name: 'spellCheck', value: 'false' },\n  ];\n  const previousAttributes = {};\n  attributes.forEach((attribute) => {\n    previousAttributes[attribute.name] = element.getAttribute(attribute.name);\n    element.setAttribute(attribute.name, attribute.value);\n  });\n  element.dataset.previousAttributes = JSON.stringify(previousAttributes);\n  element.addEventListener('input', onInput);\n  element.addEventListener('compositionupdate', onComposition);\n  element.addEventListener('compositionend', onComposition);\n  trackListeners(id, onInput, onComposition);\n  if (debug === true) {\n    addDebugListeners(element);\n  }\n}\n\nexport default bind;\n","import isEmpty from './isEmpty';\nimport isCharInRange from './isCharInRange';\nimport { ROMAJI_RANGES } from '../constants.ts';\n\n/**\n * Tests a character. Returns true if the character is [Romaji](https://en.wikipedia.org/wiki/Romaji) (allowing [Hepburn romanisation](https://en.wikipedia.org/wiki/Hepburn_romanization))\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharRomaji(char = '') {\n  if (isEmpty(char)) return false;\n  return ROMAJI_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\nexport default isCharRomaji;\n","import typeOf from './utils/typeOf';\nimport isEmpty from './utils/isEmpty';\nimport isCharRomaji from './utils/isCharRomaji';\n\n/**\n * Test if `input` is [Romaji](https://en.wikipedia.org/wiki/Romaji) (allowing [Hepburn romanisation](https://en.wikipedia.org/wiki/Hepburn_romanization))\n * @param  {String} [input=''] text\n * @param  {RegExp} [allowed] additional test allowed to pass for each char\n * @return {Boolean} true if [Romaji](https://en.wikipedia.org/wiki/Romaji)\n * @example\n * isRomaji('Tōkyō and Ōsaka')\n * // => true\n * isRomaji('12a*b&c-d')\n * // => true\n * isRomaji('あアA')\n * // => false\n * isRomaji('お願い')\n * // => false\n * isRomaji('a！b&cーd') // Zenkaku punctuation fails\n * // => false\n * isRomaji('a！b&cーd', /[！ー]/)\n * // => true\n */\nfunction isRomaji(input = '', allowed) {\n  const augmented = typeOf(allowed) === 'regexp';\n  return isEmpty(input)\n    ? false\n    : [...input].every((char) => {\n      const isRoma = isCharRomaji(char);\n      return !augmented ? isRoma : isRoma || allowed.test(char);\n    });\n}\n\nexport default isRomaji;\n","import {\n  KATAKANA_START,\n  KATAKANA_END,\n} from '../constants.ts';\n\nimport isCharInRange from './isCharInRange';\n\n/**\n * Tests a character. Returns true if the character is [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharKatakana(char = '') {\n  return isCharInRange(char, KATAKANA_START, KATAKANA_END);\n}\n\nexport default isCharKatakana;\n","import isEmpty from './isEmpty';\nimport isCharHiragana from './isCharHiragana';\nimport isCharKatakana from './isCharKatakana';\n\n/**\n * Tests a character. Returns true if the character is [Hiragana](https://en.wikipedia.org/wiki/Hiragana) or [Katakana](https://en.wikipedia.org/wiki/Katakana).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharKana(char = '') {\n  if (isEmpty(char)) return false;\n  return isCharHiragana(char) || isCharKatakana(char);\n}\n\nexport default isCharKana;\n","import isEmpty from './utils/isEmpty';\nimport isCharKana from './utils/isCharKana';\n\n/**\n * Test if `input` is [Kana](https://en.wikipedia.org/wiki/Kana) ([Katakana](https://en.wikipedia.org/wiki/Katakana) and/or [Hiragana](https://en.wikipedia.org/wiki/Hiragana))\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Kana](https://en.wikipedia.org/wiki/Kana)\n * @example\n * isKana('あ')\n * // => true\n * isKana('ア')\n * // => true\n * isKana('あーア')\n * // => true\n * isKana('A')\n * // => false\n * isKana('あAア')\n * // => false\n */\nfunction isKana(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharKana);\n}\n\nexport default isKana;\n","import isEmpty from './utils/isEmpty';\nimport isCharHiragana from './utils/isCharHiragana';\n\n/**\n * Test if `input` is [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @example\n * isHiragana('げーむ')\n * // => true\n * isHiragana('A')\n * // => false\n * isHiragana('あア')\n * // => false\n */\nfunction isHiragana(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharHiragana);\n}\n\nexport default isHiragana;\n","import isEmpty from './utils/isEmpty';\nimport isCharKatakana from './utils/isCharKatakana';\n\n/**\n * Test if `input` is [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @example\n * isKatakana('ゲーム')\n * // => true\n * isKatakana('あ')\n * // => false\n * isKatakana('A')\n * // => false\n * isKatakana('あア')\n * // => false\n */\nfunction isKatakana(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharKatakana);\n}\n\nexport default isKatakana;\n","import isEmpty from './isEmpty';\nimport { KANJI_ITERATION_MARK } from '../constants.ts';\n\n/**\n * Returns true if char is '々'\n * @param  {String} char to test\n * @return {Boolean}\n */\nfunction isCharIterationMark(char = '') {\n  if (isEmpty(char)) return false;\n  return char.charCodeAt(0) === KANJI_ITERATION_MARK;\n}\n\nexport default isCharIterationMark;\n","import { KANJI_START, KANJI_END } from '../constants.ts';\n\nimport isCharInRange from './isCharInRange';\nimport isCharIterationMark from './isCharIterationMark';\n/**\n * Tests a character. Returns true if the character is a CJK ideograph (kanji).\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharKanji(char = '') {\n  return isCharInRange(char, KANJI_START, KANJI_END) || isCharIterationMark(char);\n}\n\nexport default isCharKanji;\n","import isEmpty from './utils/isEmpty';\nimport isCharKanji from './utils/isCharKanji';\n\n/**\n * Tests if `input` is [Kanji](https://en.wikipedia.org/wiki/Kanji) ([Japanese CJK ideographs](https://en.wikipedia.org/wiki/CJK_Unified_Ideographs))\n * @param  {String} [input=''] text\n * @return {Boolean} true if all [Kanji](https://en.wikipedia.org/wiki/Kanji)\n * @example\n * isKanji('刀')\n * // => true\n * isKanji('切腹')\n * // => true\n * isKanji('勢い')\n * // => false\n * isKanji('あAア')\n * // => false\n * isKanji('🐸')\n * // => false\n */\nfunction isKanji(input = '') {\n  if (isEmpty(input)) return false;\n  return [...input].every(isCharKanji);\n}\n\nexport default isKanji;\n","import isKanji from './isKanji';\nimport isHiragana from './isHiragana';\nimport isKatakana from './isKatakana';\nimport isRomaji from './isRomaji';\n\n/**\n * Test if `input` contains a mix of [Romaji](https://en.wikipedia.org/wiki/Romaji) *and* [Kana](https://en.wikipedia.org/wiki/Kana), defaults to pass through [Kanji](https://en.wikipedia.org/wiki/Kanji)\n * @param  {String} input text\n * @param  {{ passKanji: Boolean}} [options={ passKanji: true }] optional config to pass through kanji\n * @return {Boolean} true if mixed\n * @example\n * isMixed('Abあア'))\n * // => true\n * isMixed('お腹A')) // ignores kanji by default\n * // => true\n * isMixed('お腹A', { passKanji: false }))\n * // => false\n * isMixed('ab'))\n * // => false\n * isMixed('あア'))\n * // => false\n */\nfunction isMixed(input = '', options = { passKanji: true }) {\n  const chars = [...input];\n  let hasKanji = false;\n  if (!options.passKanji) {\n    hasKanji = chars.some(isKanji);\n  }\n  return (chars.some(isHiragana) || chars.some(isKatakana)) && chars.some(isRomaji) && !hasKanji;\n}\n\nexport default isMixed;\n","import { KATAKANA_START, HIRAGANA_START } from '../constants.ts';\n\nimport isCharLongDash from './isCharLongDash';\nimport isCharSlashDot from './isCharSlashDot';\nimport isCharKatakana from './isCharKatakana';\nconst isCharInitialLongDash = (char, index) => isCharLongDash(char) && index < 1;\nconst isCharInnerLongDash = (char, index) => isCharLongDash(char) && index > 0;\nconst isKanaAsSymbol = (char) => ['ヶ', 'ヵ'].includes(char);\nconst LONG_VOWELS = {\n  a: 'あ',\n  i: 'い',\n  u: 'う',\n  e: 'え',\n  o: 'う',\n};\n\n// inject toRomaji to avoid circular dependency between toRomaji <-> katakanaToHiragana\nfunction katakanaToHiragana(\n  input = '',\n  toRomaji,\n  { isDestinationRomaji, convertLongVowelMark } = {}\n) {\n  let previousKana = '';\n\n  return input\n    .split('')\n    .reduce((hira, char, index) => {\n      // Short circuit to avoid incorrect codeshift for 'ー' and '・'\n      if (\n        isCharSlashDot(char)\n        || isCharInitialLongDash(char, index)\n        || isKanaAsSymbol(char)\n      ) {\n        return hira.concat(char);\n      }\n\n      // Transform long vowels: 'オー' to 'おう'\n      if (\n        convertLongVowelMark\n        && previousKana\n        && isCharInnerLongDash(char, index)\n      ) {\n        // Transform previousKana back to romaji, and slice off the vowel\n        const romaji = toRomaji(previousKana).slice(-1);\n        // However, ensure 'オー' => 'おお' => 'oo' if this is a transform on the way to romaji\n        if (\n          isCharKatakana(input[index - 1])\n          && romaji === 'o'\n          && isDestinationRomaji\n        ) {\n          return hira.concat('お');\n        }\n        return hira.concat(LONG_VOWELS[romaji]);\n        // Transform all other chars\n      }\n\n      if (!isCharLongDash(char) && isCharKatakana(char)) {\n        const code = char.charCodeAt(0) + (HIRAGANA_START - KATAKANA_START);\n        const hiraChar = String.fromCharCode(code);\n        previousKana = hiraChar;\n        return hira.concat(hiraChar);\n      }\n\n      // Pass non katakana chars through\n      previousKana = '';\n      return hira.concat(char);\n    }, [])\n    .join('');\n}\n\nexport default katakanaToHiragana;\n","import { transform, getSubTreeOf } from './kanaMapping';\nimport { ROMANIZATIONS } from '../constants.ts';\n\nlet kanaToHepburnMap = null;\n\n/* eslint-disable */\n// prettier-ignore\nconst BASIC_ROMAJI = {\n  あ:'a',    い:'i',   う:'u',   え:'e',    お:'o',\n  か:'ka',   き:'ki',  く:'ku',  け:'ke',   こ:'ko',\n  さ:'sa',   し:'shi', す:'su',  せ:'se',   そ:'so',\n  た:'ta',   ち:'chi', つ:'tsu', て:'te',   と:'to',\n  な:'na',   に:'ni',  ぬ:'nu',  ね:'ne',   の:'no',\n  は:'ha',   ひ:'hi',  ふ:'fu',  へ:'he',   ほ:'ho',\n  ま:'ma',   み:'mi',  む:'mu',  め:'me',   も:'mo',\n  ら:'ra',   り:'ri',  る:'ru',  れ:'re',   ろ:'ro',\n  や:'ya',   ゆ:'yu',  よ:'yo',\n  わ:'wa',   ゐ:'wi',  ゑ:'we',  を:'wo',\n  ん: 'n',\n  が:'ga',   ぎ:'gi',  ぐ:'gu',  げ:'ge',   ご:'go',\n  ざ:'za',   じ:'ji',  ず:'zu',  ぜ:'ze',   ぞ:'zo',\n  だ:'da',   ぢ:'ji',  づ:'zu',  で:'de',   ど:'do',\n  ば:'ba',   び:'bi',  ぶ:'bu',  べ:'be',   ぼ:'bo',\n  ぱ:'pa',   ぴ:'pi',  ぷ:'pu',  ぺ:'pe',   ぽ:'po',\n  ゔぁ:'va', ゔぃ:'vi', ゔ:'vu',  ゔぇ:'ve', ゔぉ:'vo',\n};\n/* eslint-enable  */\n\nconst SPECIAL_SYMBOLS = {\n  '。': '.',\n  '、': ',',\n  '：': ':',\n  '・': '/',\n  '！': '!',\n  '？': '?',\n  '〜': '~',\n  'ー': '-',\n  '「': '‘',\n  '」': '’',\n  '『': '“',\n  '』': '”',\n  '［': '[',\n  '］': ']',\n  '（': '(',\n  '）': ')',\n  '｛': '{',\n  '｝': '}',\n  '　': ' ',\n};\n\n// んい -> n'i\nconst AMBIGUOUS_VOWELS = ['あ', 'い', 'う', 'え', 'お', 'や', 'ゆ', 'よ'];\nconst SMALL_Y = { ゃ: 'ya', ゅ: 'yu', ょ: 'yo' };\nconst SMALL_Y_EXTRA = { ぃ: 'yi', ぇ: 'ye' };\nconst SMALL_AIUEO = {\n  ぁ: 'a',\n  ぃ: 'i',\n  ぅ: 'u',\n  ぇ: 'e',\n  ぉ: 'o',\n};\nconst YOON_KANA = [\n  'き',\n  'に',\n  'ひ',\n  'み',\n  'り',\n  'ぎ',\n  'び',\n  'ぴ',\n  'ゔ',\n  'く',\n  'ふ',\n];\nconst YOON_EXCEPTIONS = {\n  し: 'sh',\n  ち: 'ch',\n  じ: 'j',\n  ぢ: 'j',\n};\nconst SMALL_KANA = {\n  っ: '',\n  ゃ: 'ya',\n  ゅ: 'yu',\n  ょ: 'yo',\n  ぁ: 'a',\n  ぃ: 'i',\n  ぅ: 'u',\n  ぇ: 'e',\n  ぉ: 'o',\n};\n\n// going with the intuitive (yet incorrect) solution where っや -> yya and っぃ -> ii\n// in other words, just assume the sokuon could have been applied to anything\nconst SOKUON_WHITELIST = {\n  b: 'b',\n  c: 't',\n  d: 'd',\n  f: 'f',\n  g: 'g',\n  h: 'h',\n  j: 'j',\n  k: 'k',\n  m: 'm',\n  p: 'p',\n  q: 'q',\n  r: 'r',\n  s: 's',\n  t: 't',\n  v: 'v',\n  w: 'w',\n  x: 'x',\n  z: 'z',\n};\n\nfunction getKanaToHepburnTree() {\n  if (kanaToHepburnMap == null) {\n    kanaToHepburnMap = createKanaToHepburnMap();\n  }\n  return kanaToHepburnMap;\n}\n\nexport function getKanaToRomajiTree(romanization) {\n  switch (romanization) {\n    case ROMANIZATIONS.HEPBURN:\n      return getKanaToHepburnTree();\n    default:\n      return {};\n  }\n}\n\nfunction createKanaToHepburnMap() {\n  const romajiTree = transform(BASIC_ROMAJI);\n\n  const subtreeOf = (string) => getSubTreeOf(romajiTree, string);\n  const setTrans = (string, transliteration) => {\n    subtreeOf(string)[''] = transliteration;\n  };\n\n  Object.entries(SPECIAL_SYMBOLS).forEach(([jsymbol, symbol]) => {\n    subtreeOf(jsymbol)[''] = symbol;\n  });\n\n  [...Object.entries(SMALL_Y), ...Object.entries(SMALL_AIUEO)].forEach(\n    ([roma, kana]) => {\n      setTrans(roma, kana);\n    }\n  );\n\n  // きゃ -> kya\n  YOON_KANA.forEach((kana) => {\n    const firstRomajiChar = subtreeOf(kana)[''][0];\n    Object.entries(SMALL_Y).forEach(([yKana, yRoma]) => {\n      setTrans(kana + yKana, firstRomajiChar + yRoma);\n    });\n    // きぃ -> kyi\n    Object.entries(SMALL_Y_EXTRA).forEach(([yKana, yRoma]) => {\n      setTrans(kana + yKana, firstRomajiChar + yRoma);\n    });\n  });\n\n  Object.entries(YOON_EXCEPTIONS).forEach(([kana, roma]) => {\n    // じゃ -> ja\n    Object.entries(SMALL_Y).forEach(([yKana, yRoma]) => {\n      setTrans(kana + yKana, roma + yRoma[1]);\n    });\n    // じぃ -> jyi, じぇ -> je\n    setTrans(`${kana}ぃ`, `${roma}yi`);\n    setTrans(`${kana}ぇ`, `${roma}e`);\n  });\n\n  romajiTree['っ'] = resolveTsu(romajiTree);\n\n  Object.entries(SMALL_KANA).forEach(([kana, roma]) => {\n    setTrans(kana, roma);\n  });\n\n  AMBIGUOUS_VOWELS.forEach((kana) => {\n    setTrans(`ん${kana}`, `n'${subtreeOf(kana)['']}`);\n  });\n\n  // NOTE: could be re-enabled with an option?\n  // // んば -> mbo\n  // const LABIAL = [\n  //   'ば', 'び', 'ぶ', 'べ', 'ぼ',\n  //   'ぱ', 'ぴ', 'ぷ', 'ぺ', 'ぽ',\n  //   'ま', 'み', 'む', 'め', 'も',\n  // ];\n  // LABIAL.forEach((kana) => {\n  //   setTrans(`ん${kana}`, `m${subtreeOf(kana)['']}`);\n  // });\n\n  return Object.freeze(JSON.parse(JSON.stringify(romajiTree)));\n}\n\nfunction resolveTsu(tree) {\n  return Object.entries(tree).reduce((tsuTree, [key, value]) => {\n    if (!key) {\n      // we have reached the bottom of this branch\n      const consonant = value.charAt(0);\n      // eslint-disable-next-line no-param-reassign\n      tsuTree[key] = Object.keys(SOKUON_WHITELIST).includes(consonant)\n        ? SOKUON_WHITELIST[consonant] + value\n        : value;\n    } else {\n      // more subtrees\n      // eslint-disable-next-line no-param-reassign\n      tsuTree[key] = resolveTsu(value);\n    }\n    return tsuTree;\n  }, {});\n}\n","import memoizeOne from 'memoize-one';\nimport { dequal } from 'dequal';\n\nimport mergeWithDefaultOptions from './utils/mergeWithDefaultOptions';\nimport katakanaToHiragana from './utils/katakanaToHiragana';\nimport isKatakana from './isKatakana';\nimport { getKanaToRomajiTree } from './utils/kanaToRomajiMap';\nimport { applyMapping, mergeCustomMapping } from './utils/kanaMapping';\n\n// memoize and deeply compare args so we only recreate when necessary\nexport const createKanaToRomajiMap = memoizeOne(\n  (romanization, customRomajiMapping) => {\n    let map = getKanaToRomajiTree(romanization);\n\n    if (customRomajiMapping) {\n      map = mergeCustomMapping(map, customRomajiMapping);\n    }\n\n    return map;\n  },\n  dequal\n);\n\n/**\n * Convert kana to romaji\n * @param  {String} kana text input\n * @param  {DefaultOptions} [options=defaultOptions]\n * @param  {Object.<string, string>} [map] custom mapping\n * @return {String} converted text\n * @example\n * toRomaji('ひらがな　カタカナ')\n * // => 'hiragana katakana'\n * toRomaji('げーむ　ゲーム')\n * // => 'ge-mu geemu'\n * toRomaji('ひらがな　カタカナ', { upcaseKatakana: true })\n * // => 'hiragana KATAKANA'\n * toRomaji('つじぎり', { customRomajiMapping: { じ: 'zi', つ: 'tu', り: 'li' } });\n * // => 'tuzigili'\n */\nexport function toRomaji(input = '', options = {}, map) {\n  const config = mergeWithDefaultOptions(options);\n\n  if (!map) {\n    map = createKanaToRomajiMap(\n      config.romanization,\n      config.customRomajiMapping\n    );\n  }\n\n  // just throw away the substring index information and simply concatenate all the kana\n  return splitIntoRomaji(input, config, map)\n    .map((romajiToken) => {\n      const [start, end, romaji] = romajiToken;\n      const makeUpperCase = config.upcaseKatakana && isKatakana(input.slice(start, end));\n      return makeUpperCase ? romaji.toUpperCase() : romaji;\n    })\n    .join('');\n}\n\nfunction splitIntoRomaji(input, options, map) {\n  if (!map) {\n    map = createKanaToRomajiMap(\n      options.romanization,\n      options.customRomajiMapping\n    );\n  }\n\n  const config = Object.assign({}, { isDestinationRomaji: true }, options);\n\n  return applyMapping(\n    katakanaToHiragana(input, toRomaji, config),\n    map,\n    !options.IMEMode\n  );\n}\n\nexport default toRomaji;\n","import isEmpty from './isEmpty';\nimport { EN_PUNCTUATION_RANGES } from '../constants.ts';\nimport isCharInRange from './isCharInRange';\n\n/**\n * Tests a character. Returns true if the character is considered English punctuation.\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharEnglishPunctuation(char = '') {\n  if (isEmpty(char)) return false;\n  return EN_PUNCTUATION_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\nexport default isCharEnglishPunctuation;\n","import isEmpty from './isEmpty';\nimport { JA_PUNCTUATION_RANGES } from '../constants.ts';\nimport isCharInRange from './isCharInRange';\nimport isCharIterationMark from './isCharIterationMark';\n\n/**\n * Tests a character. Returns true if the character is considered Japanese punctuation.\n * @param  {String} char character string to test\n * @return {Boolean}\n */\nfunction isCharJapanesePunctuation(char = '') {\n  if (isEmpty(char) || isCharIterationMark(char)) return false;\n  return JA_PUNCTUATION_RANGES.some(([start, end]) => isCharInRange(char, start, end));\n}\n\nexport default isCharJapanesePunctuation;\n","import isEmpty from './utils/isEmpty';\nimport isCharEnglishPunctuation from './utils/isCharEnglishPunctuation';\nimport isCharJapanesePunctuation from './utils/isCharJapanesePunctuation';\nimport isCharRomaji from './utils/isCharRomaji';\nimport isCharKanji from './utils/isCharKanji';\nimport isCharHiragana from './utils/isCharHiragana';\nimport isCharKatakana from './utils/isCharKatakana';\nimport isCharJapanese from './utils/isCharJapanese';\n\nconst isCharEnSpace = (x) => x === ' ';\nconst isCharJaSpace = (x) => x === '　';\nconst isCharJaNum = (x) => /[０-９]/.test(x);\nconst isCharEnNum = (x) => /[0-9]/.test(x);\n\nconst TOKEN_TYPES = {\n  EN: 'en',\n  JA: 'ja',\n  EN_NUM: 'englishNumeral',\n  JA_NUM: 'japaneseNumeral',\n  EN_PUNC: 'englishPunctuation',\n  JA_PUNC: 'japanesePunctuation',\n  KANJI: 'kanji',\n  HIRAGANA: 'hiragana',\n  KATAKANA: 'katakana',\n  SPACE: 'space',\n  OTHER: 'other',\n};\n\n// prettier-ignore\nexport function getType(input, compact = false) {\n  const {\n    EN, JA, EN_NUM, JA_NUM, EN_PUNC, JA_PUNC, KANJI, HIRAGANA, KATAKANA, SPACE, OTHER,\n  } = TOKEN_TYPES;\n\n  if (compact) {\n    switch (true) {\n      case isCharJaNum(input): return OTHER;\n      case isCharEnNum(input): return OTHER;\n      case isCharEnSpace(input): return EN;\n      case isCharEnglishPunctuation(input): return OTHER;\n      case isCharJaSpace(input): return JA;\n      case isCharJapanesePunctuation(input): return OTHER;\n      case isCharJapanese(input): return JA;\n      case isCharRomaji(input): return EN;\n      default: return OTHER;\n    }\n  } else {\n    switch (true) {\n      case isCharJaSpace(input): return SPACE;\n      case isCharEnSpace(input): return SPACE;\n      case isCharJaNum(input): return JA_NUM;\n      case isCharEnNum(input): return EN_NUM;\n      case isCharEnglishPunctuation(input): return EN_PUNC;\n      case isCharJapanesePunctuation(input): return JA_PUNC;\n      case isCharKanji(input): return KANJI;\n      case isCharHiragana(input): return HIRAGANA;\n      case isCharKatakana(input): return KATAKANA;\n      case isCharJapanese(input): return JA;\n      case isCharRomaji(input): return EN;\n      default: return OTHER;\n    }\n  }\n}\n\n/**\n * Splits input into array of strings separated by opinionated token types\n * `'en', 'ja', 'englishNumeral', 'japaneseNumeral','englishPunctuation', 'japanesePunctuation','kanji', 'hiragana', 'katakana', 'space', 'other'`.\n * If `{ compact: true }` then many same-language tokens are combined (spaces + text, kanji + kana, numeral + punctuation).\n * If `{ detailed: true }` then return array will contain `{ type, value }` instead of `'value'`\n * @param  {String} input text\n * @param  {{compact: Boolean | undefined, detailed: Boolean | undefined}} [options={ compact: false, detailed: false}] options to modify output style\n * @return {(String[]|Array.<{type: String, value: String}>)} text split into tokens containing values, or detailed object\n * @example\n * tokenize('ふふフフ')\n * // ['ふふ', 'フフ']\n *\n * tokenize('感じ')\n * // ['感', 'じ']\n *\n * tokenize('人々')\n * // ['人々']\n *\n * tokenize('truly 私は悲しい')\n * // ['truly', ' ', '私', 'は', '悲', 'しい']\n *\n * tokenize('truly 私は悲しい', { compact: true })\n * // ['truly ', '私は悲しい']\n *\n * tokenize('5romaji here...!?人々漢字ひらがなカタ　カナ４「ＳＨＩＯ」。！')\n * // [ '5', 'romaji', ' ', 'here', '...!?', '人々漢字', 'ひらがな', 'カタ', '　', 'カナ', '４', '「', 'ＳＨＩＯ', '」。！']\n *\n * tokenize('5romaji here...!?人々漢字ひらがなカタ　カナ４「ＳＨＩＯ」。！', { compact: true })\n * // [ '5', 'romaji here', '...!?', '人々漢字ひらがなカタ　カナ', '４「', 'ＳＨＩＯ', '」。！']\n *\n * tokenize('5romaji here...!?人々漢字ひらがなカタ　カナ４「ＳＨＩＯ」。！ لنذهب', { detailed: true })\n * // [\n *  { type: 'englishNumeral', value: '5' },\n *  { type: 'en', value: 'romaji' },\n *  { type: 'space', value: ' ' },\n *  { type: 'en', value: 'here' },\n *  { type: 'englishPunctuation', value: '...!?' },\n *  { type: 'kanji', value: '人々漢字' },\n *  { type: 'hiragana', value: 'ひらがな' },\n *  { type: 'katakana', value: 'カタ' },\n *  { type: 'space', value: '　' },\n *  { type: 'katakana', value: 'カナ' },\n *  { type: 'japaneseNumeral', value: '４' },\n *  { type: 'japanesePunctuation', value: '「' },\n *  { type: 'ja', value: 'ＳＨＩＯ' },\n *  { type: 'japanesePunctuation', value: '」。！' },\n *  { type: 'space', value: ' ' },\n *  { type: 'other', value: 'لنذهب' },\n * ]\n *\n * tokenize('5romaji here...!?人々漢字ひらがなカタ　カナ４「ＳＨＩＯ」。！ لنذهب', { compact: true, detailed: true})\n * // [\n *  { type: 'other', value: '5' },\n *  { type: 'en', value: 'romaji here' },\n *  { type: 'other', value: '...!?' },\n *  { type: 'ja', value: '人々漢字ひらがなカタ　カナ' },\n *  { type: 'other', value: '４「' },\n *  { type: 'ja', value: 'ＳＨＩＯ' },\n *  { type: 'other', value: '」。！' },\n *  { type: 'en', value: ' ' },\n *  { type: 'other', value: 'لنذهب' },\n *]\n */\nfunction tokenize(input, { compact = false, detailed = false } = {}) {\n  if (input == null || isEmpty(input)) {\n    return [];\n  }\n  const chars = [...input];\n  let initial = chars.shift();\n  let prevType = getType(initial, compact);\n  initial = detailed ? { type: prevType, value: initial } : initial;\n\n  const result = chars.reduce(\n    (tokens, char) => {\n      const currType = getType(char, compact);\n      const sameType = currType === prevType;\n      prevType = currType;\n      let newValue = char;\n\n      if (sameType) {\n        newValue = (detailed ? tokens.pop().value : tokens.pop()) + newValue;\n      }\n\n      return detailed\n        ? tokens.concat({ type: currType, value: newValue })\n        : tokens.concat(newValue);\n    },\n    [initial]\n  );\n  return result;\n}\n\nexport default tokenize;\n","import isJapanese from './isJapanese';\nimport isKana from './isKana';\nimport isKanji from './isKanji';\nimport tokenize from './tokenize';\n\nconst isLeadingWithoutInitialKana = (input, leading) => leading && !isKana(input[0]);\nconst isTrailingWithoutFinalKana = (input, leading) => !leading && !isKana(input[input.length - 1]);\nconst isInvalidMatcher = (input, matchKanji) =>\n  (matchKanji && ![...matchKanji].some(isKanji)) || (!matchKanji && isKana(input));\n\n/**\n * Strips [Okurigana](https://en.wikipedia.org/wiki/Okurigana)\n * @param  {String} input text\n * @param  {{ leading: Boolean | undefined, matchKanji: string | undefined }} [options={ leading: false, matchKanji: '' }] optional config\n * @return {String} text with okurigana removed\n * @example\n * stripOkurigana('踏み込む')\n * // => '踏み込'\n * stripOkurigana('お祝い')\n * // => 'お祝'\n * stripOkurigana('お腹', { leading: true });\n * // => '腹'\n * stripOkurigana('ふみこむ', { matchKanji: '踏み込む' });\n * // => 'ふみこ'\n * stripOkurigana('おみまい', { matchKanji: 'お祝い', leading: true });\n * // => 'みまい'\n */\nfunction stripOkurigana(input = '', { leading = false, matchKanji = '' } = {}) {\n  if (\n    !isJapanese(input) ||\n    isLeadingWithoutInitialKana(input, leading) ||\n    isTrailingWithoutFinalKana(input, leading) ||\n    isInvalidMatcher(input, matchKanji)\n  ) {\n    return input;\n  }\n\n  const chars = matchKanji || input;\n  const okuriganaRegex = new RegExp(\n    leading ? `^${tokenize(chars).shift()}` : `${tokenize(chars).pop()}$`\n  );\n  return input.replace(okuriganaRegex, '');\n}\n\nexport default stripOkurigana;\n","import mergeWithDefaultOptions from './utils/mergeWithDefaultOptions';\nimport katakanaToHiragana from './utils/katakanaToHiragana';\nimport isCharEnglishPunctuation from './utils/isCharEnglishPunctuation';\nimport isRomaji from './isRomaji';\nimport isMixed from './isMixed';\nimport toKana from './toKana';\nimport toRomaji from './toRomaji';\n\n/**\n * Convert input to [Hiragana](https://en.wikipedia.org/wiki/Hiragana)\n * @param  {String} [input=''] text\n * @param  {DefaultOptions} [options=defaultOptions]\n * @return {String} converted text\n * @example\n * toHiragana('toukyou, オオサカ')\n * // => 'とうきょう、　おおさか'\n * toHiragana('only カナ', { passRomaji: true })\n * // => 'only かな'\n * toHiragana('wi')\n * // => 'うぃ'\n * toHiragana('wi', { useObsoleteKana: true })\n * // => 'ゐ'\n */\nfunction toHiragana(input = '', options = {}) {\n  const config = mergeWithDefaultOptions(options);\n  if (config.passRomaji) {\n    return katakanaToHiragana(input, toRomaji, config);\n  }\n\n  if (isMixed(input, { passKanji: true })) {\n    const convertedKatakana = katakanaToHiragana(input, toRomaji, config);\n    return toKana(convertedKatakana.toLowerCase(), config);\n  }\n\n  if (isRomaji(input) || isCharEnglishPunctuation(input)) {\n    return toKana(input.toLowerCase(), config);\n  }\n\n  return katakanaToHiragana(input, toRomaji, config);\n}\n\nexport default toHiragana;\n","import mergeWithDefaultOptions from './utils/mergeWithDefaultOptions';\nimport hiraganaToKatakana from './utils/hiraganaToKatakana';\nimport isCharEnglishPunctuation from './utils/isCharEnglishPunctuation';\nimport toKana from './toKana';\nimport isRomaji from './isRomaji';\nimport isMixed from './isMixed';\n\n/**\n * Convert input to [Katakana](https://en.wikipedia.org/wiki/Katakana)\n * @param  {String} [input=''] text\n * @param  {DefaultOptions} [options=defaultOptions]\n * @return {String} converted text\n * @example\n * toKatakana('toukyou, おおさか')\n * // => 'トウキョウ、　オオサカ'\n * toKatakana('only かな', { passRomaji: true })\n * // => 'only カナ'\n * toKatakana('wi')\n * // => 'ウィ'\n * toKatakana('wi', { useObsoleteKana: true })\n * // => 'ヰ'\n */\nfunction toKatakana(input = '', options = {}) {\n  const mergedOptions = mergeWithDefaultOptions(options);\n  if (mergedOptions.passRomaji) {\n    return hiraganaToKatakana(input);\n  }\n\n  if (isMixed(input) || isRomaji(input) || isCharEnglishPunctuation(input)) {\n    const hiragana = toKana(input.toLowerCase(), mergedOptions);\n    return hiraganaToKatakana(hiragana);\n  }\n\n  return hiraganaToKatakana(input);\n}\n\nexport default toKatakana;\n","import { findListeners, untrackListeners } from './utils/dom';\nimport { removeDebugListeners } from './utils/logInputEvents';\n\n/**\n * Unbinds eventListener from input field\n * @param  {HTMLInputElement | HTMLTextAreaElement} element textarea, input\n */\nexport function unbind(element, debug = false) {\n  const listeners = findListeners(element);\n  if (listeners == null) {\n    throw new Error(\n      `Element provided to Wanakana unbind() had no listener registered.\\n Received: ${JSON.stringify(\n        element\n      )}`\n    );\n  }\n  const { inputHandler, compositionHandler } = listeners;\n  const attributes = JSON.parse(element.dataset.previousAttributes);\n  Object.keys(attributes).forEach((key) => {\n    if (attributes[key]) {\n      element.setAttribute(key, attributes[key]);\n    } else {\n      element.removeAttribute(key);\n    }\n  });\n  element.removeAttribute('data-previous-attributes');\n  element.removeAttribute('data-ignore-composition');\n  element.removeEventListener('input', inputHandler);\n  element.removeEventListener('compositionstart', compositionHandler);\n  element.removeEventListener('compositionupdate', compositionHandler);\n  element.removeEventListener('compositionend', compositionHandler);\n  untrackListeners(listeners);\n  if (debug === true) {\n    removeDebugListeners(element);\n  }\n}\n\nexport default unbind;\n"],"names":["typeOf","value","Object","toString","call","slice","toLowerCase","isEmpty","input","length","isCharInRange","char","arguments","undefined","start","end","code","charCodeAt","VERSION","TO_KANA_METHODS","HIRAGANA","KATAKANA","ROMANIZATIONS","HEPBURN","DEFAULT_OPTIONS","useObsoleteKana","passRomaji","convertLongVowelMark","upcaseKatakana","IMEMode","romanization","LATIN_UPPERCASE_START","LATIN_UPPERCASE_END","HIRAGANA_START","HIRAGANA_END","KATAKANA_START","KATAKANA_END","KANJI_START","KANJI_END","KANJI_ITERATION_MARK","PROLONGED_SOUND_MARK","KANA_SLASH_DOT","ZENKAKU_UPPERCASE","ZENKAKU_LOWERCASE","KANA_PUNCTUATION","JA_PUNCTUATION_RANGES","JAPANESE_RANGES","ROMAJI_RANGES","EN_PUNCTUATION_RANGES","isCharJapanese","some","_ref","isJapanese","allowed","augmented","every","isJa","test","safeIsNaN","Number","isNaN","areInputsEqual","newInputs","lastInputs","i","first","second","memoizeOne","resultFn","isEqual","cache","memoized","newArgs","_i","lastThis","this","lastArgs","lastResult","apply","clear","has","prototype","hasOwnProperty","find","iter","tar","key","keys","dequal","foo","bar","ctor","len","tmp","constructor","Date","getTime","RegExp","Array","Set","size","Map","get","ArrayBuffer","Uint8Array","DataView","byteLength","getInt8","isView","mergeWithDefaultOptions","opts","assign","applyMapping","string","mapping","convertEnding","root","newChunk","remaining","currentCursor","firstChar","charAt","parse","tree","lastCursor","concat","subtree","nextChar","nextSubtree","transform","entries","reduce","map","endOfBranch","getSubTreeOf","split","correctSubTree","createCustomMapping","customMap","customTree","forEach","_ref2","roma","kana","subTree","transformMap","mapSubtree","customSubtree","newSubtree","_ref3","JSON","stringify","mergeCustomMapping","customMapping","BASIC_KUNREI","a","u","e","o","k","s","t","n","h","m","y","r","w","g","z","d","b","p","v","SPECIAL_SYMBOLS","CONSONANTS","q","f","SMALL_Y","ya","yi","yu","ye","yo","SMALL_VOWELS","ALIASES","sh","ch","cy","chy","shy","j","jy","shi","chi","tsu","ji","fu","SMALL_LETTERS","tu","wa","ka","ke","SPECIAL_CASES","wu","wi","we","kwa","whu","tha","thu","tho","dha","dhu","dho","AIUEO_CONSTRUCTIONS","wh","kw","qw","gw","sw","ts","th","tw","dh","dw","fw","createRomajiToKanaMap","kanaTree","subtreeOf","addTsu","tsuTree","_ref10","consonant","yKana","symbol","jsymbol","_ref4","aiueoKana","_ref5","vowel","nChar","c","_ref6","alternative","allExceptLast","last","_ref8","kunreiRoma","chars","xSubtree","list","_ref7","alt","startsWith","replace","altRoma","prefix","_ref9","freeze","romajiToKanaMap","USE_OBSOLETE_KANA_MAP","isCharUpperCase","isCharLongDash","isCharSlashDot","isCharHiragana","hiraganaToKatakana","kata","push","kataChar","String","fromCharCode","join","customKanaMapping","mapCopy","IME_MODE_MAP","toKana","config","options","splitIntoConvertedKana","kanaToken","enforceHiragana","enforceKatakana","LISTENERS","makeOnInput","mergedConfig","preConfiguredMap","triggers","toUpperCase","target","prevInput","dataset","ignoreComposition","head","textToConvert","tail","toConvert","text","cursor","includes","catalystChars","takeWhileAndSlice","workFromStart","startIndex","reverse","workBackwards","splitInput","selectionEnd","convertedText","newCursor","newValue","setTimeout","setSelectionRange","convertInput","onComposition","type","data","window","navigator","platform","source","predicate","x","result","events","selectionStart","console","log","compositionstart","onCompositionStart","compositionupdate","compositionend","onCompositionEnd","ELEMENTS","idCounter","isCharRomaji","isRomaji","isRoma","isCharKatakana","isCharKana","isKana","isHiragana","isKatakana","isCharIterationMark","isCharKanji","isKanji","isMixed","hasKanji","passKanji","isCharInitialLongDash","index","isCharInnerLongDash","isKanaAsSymbol","LONG_VOWELS","katakanaToHiragana","toRomaji","isDestinationRomaji","previousKana","hira","romaji","hiraChar","kanaToHepburnMap","BASIC_ROMAJI","あ","い","う","え","お","か","き","く","け","こ","さ","し","す","せ","そ","た","ち","つ","て","と","な","に","ぬ","ね","の","は","ひ","ふ","へ","ほ","ま","み","む","め","も","ら","り","る","れ","ろ","や","ゆ","よ","わ","ゐ","ゑ","を","ん","が","ぎ","ぐ","げ","ご","ざ","じ","ず","ぜ","ぞ","だ","ぢ","づ","で","ど","ば","び","ぶ","べ","ぼ","ぱ","ぴ","ぷ","ぺ","ぽ","ゔぁ","ゔぃ","ゔ","ゔぇ","ゔぉ","AMBIGUOUS_VOWELS","ゃ","ゅ","ょ","SMALL_Y_EXTRA","ぃ","ぇ","SMALL_AIUEO","ぁ","ぅ","ぉ","YOON_KANA","YOON_EXCEPTIONS","SMALL_KANA","っ","SOKUON_WHITELIST","getKanaToHepburnTree","romajiTree","setTrans","transliteration","firstRomajiChar","yRoma","resolveTsu","createKanaToHepburnMap","createKanaToRomajiMap","customRomajiMapping","getKanaToRomajiTree","splitIntoRomaji","romajiToken","isCharEnglishPunctuation","isCharJapanesePunctuation","isCharEnSpace","isCharJaSpace","isCharJaNum","isCharEnNum","TOKEN_TYPES","EN","JA","EN_NUM","JA_NUM","EN_PUNC","JA_PUNC","KANJI","SPACE","OTHER","getType","compact","tokenize","detailed","initial","shift","prevType","tokens","currType","sameType","pop","element","debug","nodeName","Error","hasAttribute","onInput","id","now","previousAttributes","name","attribute","getAttribute","setAttribute","addEventListener","inputHandler","compositionHandler","trackListeners","event","handler","leading","matchKanji","isLeadingWithoutInitialKana","isTrailingWithoutFinalKana","isInvalidMatcher","okuriganaRegex","mergedOptions","listeners","el","attributes","removeAttribute","removeEventListener","targetId","filter","untrackListeners"],"mappings":"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","x_google_ignoreList":[6,7]}